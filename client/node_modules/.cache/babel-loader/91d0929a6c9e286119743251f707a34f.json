{"ast":null,"code":"// @ts-check\n// levenshtein distance without astral support\n\n/** from https://github.com/hiddentao/fast-levenshtein slightly modified to double weight replacements as done by python-Levenshtein/fuzzywuzzy */\nvar collator;\n\ntry {\n  collator = typeof Intl !== \"undefined\" && typeof Intl.Collator !== \"undefined\" ? Intl.Collator(\"generic\", {\n    sensitivity: \"base\"\n  }) : null;\n} catch (err) {\n  if (typeof console !== undefined) console.warn(\"Collator could not be initialized and wouldn't be used\");\n}\n\nmodule.exports = function leven(a, b, options) {\n  /** from https://github.com/sindresorhus/leven slightly modified to double weight replacements as done by python-Levenshtein/fuzzywuzzy */\n  var arr = [];\n  var charCodeCache = [];\n  var useCollator = options && collator && options.useCollator;\n  var subcost = 1; //to match behavior of python-Levenshtein and fuzzywuzzy, set to 2 in _ratio\n\n  if (options && options.subcost && typeof options.subcost === \"number\") subcost = options.subcost;\n\n  if (a === b) {\n    return 0;\n  }\n\n  var aLen = a.length;\n  var bLen = b.length;\n\n  if (aLen === 0) {\n    return bLen;\n  }\n\n  if (bLen === 0) {\n    return aLen;\n  }\n\n  var bCharCode;\n  var ret;\n  var tmp;\n  var tmp2;\n  var i = 0;\n  var j = 0;\n\n  while (i < aLen) {\n    charCodeCache[i] = a.charCodeAt(i);\n    arr[i] = ++i;\n  }\n\n  if (!useCollator) {\n    //checking for collator inside while 2x slower\n    while (j < bLen) {\n      bCharCode = b.charCodeAt(j);\n      tmp = j++;\n      ret = j;\n\n      for (i = 0; i < aLen; i++) {\n        tmp2 = bCharCode === charCodeCache[i] ? tmp : tmp + subcost;\n        tmp = arr[i];\n        ret = arr[i] = tmp > ret ? tmp2 > ret ? ret + 1 : tmp2 : tmp2 > tmp ? tmp + 1 : tmp2;\n      }\n    }\n  } else {\n    while (j < bLen) {\n      bCharCode = b.charCodeAt(j);\n      tmp = j++;\n      ret = j;\n\n      for (i = 0; i < aLen; i++) {\n        tmp2 = 0 === collator.compare(String.fromCharCode(bCharCode), String.fromCharCode(charCodeCache[i])) ? tmp : tmp + subcost;\n        tmp = arr[i];\n        ret = arr[i] = tmp > ret ? tmp2 > ret ? ret + 1 : tmp2 : tmp2 > tmp ? tmp + 1 : tmp2;\n      }\n    }\n  }\n\n  return ret;\n};","map":{"version":3,"sources":["/Users/armanrafati/Documents/Cleanify/client/node_modules/fuzzball/lib/leven.js"],"names":["collator","Intl","Collator","sensitivity","err","console","undefined","warn","module","exports","leven","a","b","options","arr","charCodeCache","useCollator","subcost","aLen","length","bLen","bCharCode","ret","tmp","tmp2","i","j","charCodeAt","compare","String","fromCharCode"],"mappings":"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","sourcesContent":["// @ts-check\n// levenshtein distance without astral support\n\n/** from https://github.com/hiddentao/fast-levenshtein slightly modified to double weight replacements as done by python-Levenshtein/fuzzywuzzy */\nvar collator;\ntry {\n    collator = (typeof Intl !== \"undefined\" && typeof Intl.Collator !== \"undefined\") ? Intl.Collator(\"generic\", { sensitivity: \"base\" }) : null;\n} catch (err) {\n    if (typeof console !== undefined) console.warn(\"Collator could not be initialized and wouldn't be used\");\n}\n\nmodule.exports = function leven(a, b, options) {\n\n    /** from https://github.com/sindresorhus/leven slightly modified to double weight replacements as done by python-Levenshtein/fuzzywuzzy */\n    var arr = [];\n    var charCodeCache = [];\n    var useCollator = (options && collator && options.useCollator);\n    var subcost = 1;\n    //to match behavior of python-Levenshtein and fuzzywuzzy, set to 2 in _ratio\n    if (options && options.subcost && typeof options.subcost === \"number\") subcost = options.subcost;\n\n    if (a === b) {\n        return 0;\n    }\n\n    var aLen = a.length;\n    var bLen = b.length;\n\n    if (aLen === 0) {\n        return bLen;\n    }\n\n    if (bLen === 0) {\n        return aLen;\n    }\n\n    var bCharCode;\n    var ret;\n    var tmp;\n    var tmp2;\n    var i = 0;\n    var j = 0;\n\n    while (i < aLen) {\n        charCodeCache[i] = a.charCodeAt(i);\n        arr[i] = ++i;\n    }\n    if (!useCollator) {  //checking for collator inside while 2x slower\n        while (j < bLen) {\n            bCharCode = b.charCodeAt(j);\n            tmp = j++;\n            ret = j;\n            for (i = 0; i < aLen; i++) {\n                tmp2 = bCharCode === charCodeCache[i] ? tmp : tmp + subcost;\n                tmp = arr[i];\n                ret = arr[i] = tmp > ret ? tmp2 > ret ? ret + 1 : tmp2 : tmp2 > tmp ? tmp + 1 : tmp2;\n            }\n        }\n    }\n    else {\n        while (j < bLen) {\n            bCharCode = b.charCodeAt(j);\n            tmp = j++;\n            ret = j;\n\n            for (i = 0; i < aLen; i++) {\n                tmp2 = 0 === collator.compare(String.fromCharCode(bCharCode), String.fromCharCode(charCodeCache[i])) ? tmp : tmp + subcost;\n                tmp = arr[i];\n                ret = arr[i] = tmp > ret ? tmp2 > ret ? ret + 1 : tmp2 : tmp2 > tmp ? tmp + 1 : tmp2;\n            }\n        }\n    }\n    return ret;\n\n}"]},"metadata":{},"sourceType":"script"}
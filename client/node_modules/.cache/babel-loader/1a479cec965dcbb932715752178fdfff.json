{"ast":null,"code":"var _jsxFileName = \"/Users/armanrafati/Documents/Cleanify/client/src/components/Modals/Conflict/SongListItem.jsx\",\n    _s = $RefreshSig$();\n\nimport { AddIcon, ExternalLinkIcon } from \"@chakra-ui/icons\";\nimport { Box, Flex, IconButton, Link, ListItem, Text, Tooltip, useToast } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { useGlobalState } from \"../../../contexts/GlobalContext\";\nimport { addTracksToPlaylist } from \"../../../utils/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SongListItem = _ref => {\n  _s();\n\n  let {\n    allSongs,\n    songTitle,\n    songLink,\n    songURI,\n    ogSongTitle\n  } = _ref;\n  const {\n    cleanedPlaylistID,\n    setSongsToResolve,\n    songsToResolve\n  } = useGlobalState();\n  const toast = useToast();\n\n  const handleAddToPlaylist = async songURI => {\n    const response = await addTracksToPlaylist(cleanedPlaylistID, [songURI]);\n\n    if (response instanceof Error) {\n      toast({\n        title: `Error adding song to playlist`,\n        position: \"top-right\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true\n      });\n      return;\n    }\n\n    toast({\n      title: `Added song to playlist\"`,\n      position: \"top-right\",\n      status: \"success\",\n      duration: 2000,\n      isClosable: true\n    });\n    handleRemoveItemFromList();\n  };\n\n  const handleRemoveItemFromList = () => {\n    const remaining = new Map();\n\n    for (let [key, value] of songsToResolve) {\n      if (key !== ogSongTitle) remaining.set(key, value);\n    }\n\n    setSongsToResolve(remaining); // TODO: Update summary view\n  };\n\n  return /*#__PURE__*/_jsxDEV(ListItem, {\n    children: /*#__PURE__*/_jsxDEV(Flex, {\n      direction: \"col\",\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        children: songTitle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        minW: \"40px\",\n        ml: \"auto\",\n        mr: 0,\n        mb: 2,\n        children: [/*#__PURE__*/_jsxDEV(Tooltip, {\n          hasArrow: true,\n          label: \"Add song to playlist\",\n          fontSize: \"md\",\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            ml: 3,\n            minW: \"25px\",\n            w: \"25px\",\n            h: \"25px\",\n            icon: /*#__PURE__*/_jsxDEV(AddIcon, {\n              h: 3,\n              w: 3\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 21\n            }, this),\n            colorScheme: \"green\",\n            onClick: () => handleAddToPlaylist(songURI),\n            children: \"+\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          hasArrow: true,\n          label: \"View song in Spotify\",\n          fontSize: \"md\",\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            isExternal: true,\n            href: songLink,\n            children: /*#__PURE__*/_jsxDEV(IconButton, {\n              ml: 3,\n              minW: \"25px\",\n              w: \"25px\",\n              h: \"25px\",\n              colorScheme: \"teal\",\n              icon: /*#__PURE__*/_jsxDEV(ExternalLinkIcon, {\n                h: 3,\n                w: 3\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 86,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SongListItem, \"m6RJjOq+imY2YW6v8T+AKEnfKX8=\", false, function () {\n  return [useGlobalState, useToast];\n});\n\n_c = SongListItem;\nexport default SongListItem;\n\nvar _c;\n\n$RefreshReg$(_c, \"SongListItem\");","map":{"version":3,"sources":["/Users/armanrafati/Documents/Cleanify/client/src/components/Modals/Conflict/SongListItem.jsx"],"names":["AddIcon","ExternalLinkIcon","Box","Flex","IconButton","Link","ListItem","Text","Tooltip","useToast","React","useGlobalState","addTracksToPlaylist","SongListItem","allSongs","songTitle","songLink","songURI","ogSongTitle","cleanedPlaylistID","setSongsToResolve","songsToResolve","toast","handleAddToPlaylist","response","Error","title","position","status","duration","isClosable","handleRemoveItemFromList","remaining","Map","key","value","set"],"mappings":";;;AAAA,SAASA,OAAT,EAAkBC,gBAAlB,QAA0C,kBAA1C;AACA,SACEC,GADF,EAEEC,IAFF,EAGEC,UAHF,EAIEC,IAJF,EAKEC,QALF,EAMEC,IANF,EAOEC,OAPF,EAQEC,QARF,QASO,kBATP;AAUA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,QAA+B,iCAA/B;AACA,SAASC,mBAAT,QAAoC,oBAApC;;;AACA,MAAMC,YAAY,GAAG,QAMf;AAAA;;AAAA,MANgB;AACpBC,IAAAA,QADoB;AAEpBC,IAAAA,SAFoB;AAGpBC,IAAAA,QAHoB;AAIpBC,IAAAA,OAJoB;AAKpBC,IAAAA;AALoB,GAMhB;AACJ,QAAM;AAAEC,IAAAA,iBAAF;AAAqBC,IAAAA,iBAArB;AAAwCC,IAAAA;AAAxC,MACJV,cAAc,EADhB;AAEA,QAAMW,KAAK,GAAGb,QAAQ,EAAtB;;AAEA,QAAMc,mBAAmB,GAAG,MAAON,OAAP,IAAmB;AAC7C,UAAMO,QAAQ,GAAG,MAAMZ,mBAAmB,CAACO,iBAAD,EAAoB,CAACF,OAAD,CAApB,CAA1C;;AAEA,QAAIO,QAAQ,YAAYC,KAAxB,EAA+B;AAC7BH,MAAAA,KAAK,CAAC;AACJI,QAAAA,KAAK,EAAG,+BADJ;AAEJC,QAAAA,QAAQ,EAAE,WAFN;AAGJC,QAAAA,MAAM,EAAE,OAHJ;AAIJC,QAAAA,QAAQ,EAAE,IAJN;AAKJC,QAAAA,UAAU,EAAE;AALR,OAAD,CAAL;AAQA;AACD;;AACDR,IAAAA,KAAK,CAAC;AACJI,MAAAA,KAAK,EAAG,yBADJ;AAEJC,MAAAA,QAAQ,EAAE,WAFN;AAGJC,MAAAA,MAAM,EAAE,SAHJ;AAIJC,MAAAA,QAAQ,EAAE,IAJN;AAKJC,MAAAA,UAAU,EAAE;AALR,KAAD,CAAL;AAOAC,IAAAA,wBAAwB;AACzB,GAtBD;;AAwBA,QAAMA,wBAAwB,GAAG,MAAM;AACrC,UAAMC,SAAS,GAAG,IAAIC,GAAJ,EAAlB;;AACA,SAAK,IAAI,CAACC,GAAD,EAAMC,KAAN,CAAT,IAAyBd,cAAzB,EAAyC;AACvC,UAAIa,GAAG,KAAKhB,WAAZ,EAAyBc,SAAS,CAACI,GAAV,CAAcF,GAAd,EAAmBC,KAAnB;AAC1B;;AACDf,IAAAA,iBAAiB,CAACY,SAAD,CAAjB,CALqC,CAMrC;AACD,GAPD;;AASA,sBACE,QAAC,QAAD;AAAA,2BACE,QAAC,IAAD;AAAM,MAAA,SAAS,EAAC,KAAhB;AAAA,8BACE,QAAC,IAAD;AAAA,kBAAOjB;AAAP;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,GAAD;AAAK,QAAA,IAAI,EAAC,MAAV;AAAiB,QAAA,EAAE,EAAC,MAApB;AAA2B,QAAA,EAAE,EAAE,CAA/B;AAAkC,QAAA,EAAE,EAAE,CAAtC;AAAA,gCACE,QAAC,OAAD;AAAS,UAAA,QAAQ,MAAjB;AAAkB,UAAA,KAAK,EAAC,sBAAxB;AAA+C,UAAA,QAAQ,EAAC,IAAxD;AAAA,iCACE,QAAC,UAAD;AACE,YAAA,EAAE,EAAE,CADN;AAEE,YAAA,IAAI,EAAC,MAFP;AAGE,YAAA,CAAC,EAAC,MAHJ;AAIE,YAAA,CAAC,EAAC,MAJJ;AAKE,YAAA,IAAI,eAAE,QAAC,OAAD;AAAS,cAAA,CAAC,EAAE,CAAZ;AAAe,cAAA,CAAC,EAAE;AAAlB;AAAA;AAAA;AAAA;AAAA,oBALR;AAME,YAAA,WAAW,EAAC,OANd;AAOE,YAAA,OAAO,EAAE,MAAMQ,mBAAmB,CAACN,OAAD,CAPpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eAeE,QAAC,OAAD;AAAS,UAAA,QAAQ,MAAjB;AAAkB,UAAA,KAAK,EAAC,sBAAxB;AAA+C,UAAA,QAAQ,EAAC,IAAxD;AAAA,iCACE,QAAC,IAAD;AAAM,YAAA,UAAU,MAAhB;AAAiB,YAAA,IAAI,EAAED,QAAvB;AAAA,mCACE,QAAC,UAAD;AACE,cAAA,EAAE,EAAE,CADN;AAEE,cAAA,IAAI,EAAC,MAFP;AAGE,cAAA,CAAC,EAAC,MAHJ;AAIE,cAAA,CAAC,EAAC,MAJJ;AAKE,cAAA,WAAW,EAAC,MALd;AAME,cAAA,IAAI,eAAE,QAAC,gBAAD;AAAkB,gBAAA,CAAC,EAAE,CAArB;AAAwB,gBAAA,CAAC,EAAE;AAA3B;AAAA;AAAA;AAAA;AAAA;AANR;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAfF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAmCD,CA/ED;;GAAMH,Y;UAQFF,c,EACYF,Q;;;KATVI,Y;AAiFN,eAAeA,YAAf","sourcesContent":["import { AddIcon, ExternalLinkIcon } from \"@chakra-ui/icons\";\nimport {\n  Box,\n  Flex,\n  IconButton,\n  Link,\n  ListItem,\n  Text,\n  Tooltip,\n  useToast,\n} from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { useGlobalState } from \"../../../contexts/GlobalContext\";\nimport { addTracksToPlaylist } from \"../../../utils/api\";\nconst SongListItem = ({\n  allSongs,\n  songTitle,\n  songLink,\n  songURI,\n  ogSongTitle,\n}) => {\n  const { cleanedPlaylistID, setSongsToResolve, songsToResolve } =\n    useGlobalState();\n  const toast = useToast();\n\n  const handleAddToPlaylist = async (songURI) => {\n    const response = await addTracksToPlaylist(cleanedPlaylistID, [songURI]);\n\n    if (response instanceof Error) {\n      toast({\n        title: `Error adding song to playlist`,\n        position: \"top-right\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n      });\n\n      return;\n    }\n    toast({\n      title: `Added song to playlist\"`,\n      position: \"top-right\",\n      status: \"success\",\n      duration: 2000,\n      isClosable: true,\n    });\n    handleRemoveItemFromList();\n  };\n\n  const handleRemoveItemFromList = () => {\n    const remaining = new Map();\n    for (let [key, value] of songsToResolve) {\n      if (key !== ogSongTitle) remaining.set(key, value);\n    }\n    setSongsToResolve(remaining);\n    // TODO: Update summary view\n  };\n\n  return (\n    <ListItem>\n      <Flex direction=\"col\">\n        <Text>{songTitle}</Text>\n        <Box minW=\"40px\" ml=\"auto\" mr={0} mb={2}>\n          <Tooltip hasArrow label=\"Add song to playlist\" fontSize=\"md\">\n            <IconButton\n              ml={3}\n              minW=\"25px\"\n              w=\"25px\"\n              h=\"25px\"\n              icon={<AddIcon h={3} w={3} />}\n              colorScheme=\"green\"\n              onClick={() => handleAddToPlaylist(songURI)}\n            >\n              +\n            </IconButton>\n          </Tooltip>\n\n          <Tooltip hasArrow label=\"View song in Spotify\" fontSize=\"md\">\n            <Link isExternal href={songLink}>\n              <IconButton\n                ml={3}\n                minW=\"25px\"\n                w=\"25px\"\n                h=\"25px\"\n                colorScheme=\"teal\"\n                icon={<ExternalLinkIcon h={3} w={3} />}\n              />\n            </Link>\n          </Tooltip>\n        </Box>\n      </Flex>\n    </ListItem>\n  );\n};\n\nexport default SongListItem;\n"]},"metadata":{},"sourceType":"module"}
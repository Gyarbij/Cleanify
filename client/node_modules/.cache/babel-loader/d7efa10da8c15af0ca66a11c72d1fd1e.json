{"ast":null,"code":"// @ts-check\n// levenshtein distance with wildcard support\n\n/** from https://github.com/hiddentao/fast-levenshtein slightly modified to double weight replacements as done by python-Levenshtein/fuzzywuzzy */\nvar collator;\n\ntry {\n  collator = typeof Intl !== \"undefined\" && typeof Intl.Collator !== \"undefined\" ? Intl.Collator(\"generic\", {\n    sensitivity: \"base\"\n  }) : null;\n} catch (err) {\n  if (typeof console !== undefined) console.warn(\"Collator could not be initialized and wouldn't be used\");\n}\n\nmodule.exports = function leven(a, b, options, regLeven) {\n  /** from https://github.com/sindresorhus/leven slightly modified to double weight replacements as done by python-Levenshtein/fuzzywuzzy */\n  var arr = [];\n  var charCodeCache = [];\n  var useCollator = options && collator && options.useCollator;\n  var subcost = 1; //to match behavior of python-Levenshtein and fuzzywuzzy, set to 2 in _ratio\n\n  if (options && options.subcost && typeof options.subcost === \"number\") subcost = options.subcost;\n\n  if (a === b) {\n    return 0;\n  }\n\n  var aLen = a.length;\n  var bLen = b.length;\n\n  if (aLen === 0) {\n    return bLen;\n  }\n\n  if (bLen === 0) {\n    return aLen;\n  }\n\n  function escapeRegExp(string) {\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n  } // not doing full check in _ratio as of now\n\n\n  if (options && options.wildcards && typeof options.wildcards === \"string\" && options.wildcards.length > 0) {\n    var wildchar;\n    var wildcode;\n\n    if (options.full_process === false && options.processed !== true) {\n      wildchar = options.wildcards[0];\n      wildcode = wildchar.charCodeAt(0);\n      var pattern = '[' + escapeRegExp(options.wildcards) + ']';\n      a = a.replace(new RegExp(pattern, \"g\"), wildchar);\n      b = b.replace(new RegExp(pattern, \"g\"), wildchar);\n      if (a === b) return 0; //check again post replacement\n    } else {\n      wildchar = options.wildcards[0].toLowerCase();\n      wildcode = wildchar.charCodeAt(0);\n    }\n\n    var bCharCode;\n    var ret;\n    var tmp;\n    var tmp2;\n    var i = 0;\n    var j = 0;\n\n    while (i < aLen) {\n      charCodeCache[i] = a.charCodeAt(i);\n      arr[i] = ++i;\n    }\n\n    if (!useCollator) {\n      //checking for collator inside while 2x slower\n      while (j < bLen) {\n        bCharCode = b.charCodeAt(j);\n        tmp = j++;\n        ret = j;\n\n        for (i = 0; i < aLen; i++) {\n          tmp2 = bCharCode === charCodeCache[i] || bCharCode === wildcode || charCodeCache[i] === wildcode ? tmp : tmp + subcost;\n          tmp = arr[i];\n          ret = arr[i] = tmp > ret ? tmp2 > ret ? ret + 1 : tmp2 : tmp2 > tmp ? tmp + 1 : tmp2;\n        }\n      }\n    } else {\n      while (j < bLen) {\n        bCharCode = b.charCodeAt(j);\n        tmp = j++;\n        ret = j;\n\n        for (i = 0; i < aLen; i++) {\n          tmp2 = 0 === collator.compare(String.fromCharCode(bCharCode), String.fromCharCode(charCodeCache[i])) || bCharCode === wildcode || charCodeCache[i] === wildcode ? tmp : tmp + subcost;\n          tmp = arr[i];\n          ret = arr[i] = tmp > ret ? tmp2 > ret ? ret + 1 : tmp2 : tmp2 > tmp ? tmp + 1 : tmp2;\n        }\n      }\n    }\n\n    return ret;\n  } else {\n    return regLeven(a, b, options);\n  }\n};","map":{"version":3,"sources":["/Users/armanrafati/Documents/Cleanify/client/node_modules/fuzzball/lib/wildcardLeven.js"],"names":["collator","Intl","Collator","sensitivity","err","console","undefined","warn","module","exports","leven","a","b","options","regLeven","arr","charCodeCache","useCollator","subcost","aLen","length","bLen","escapeRegExp","string","replace","wildcards","wildchar","wildcode","full_process","processed","charCodeAt","pattern","RegExp","toLowerCase","bCharCode","ret","tmp","tmp2","i","j","compare","String","fromCharCode"],"mappings":"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","sourcesContent":["// @ts-check\n// levenshtein distance with wildcard support\n\n/** from https://github.com/hiddentao/fast-levenshtein slightly modified to double weight replacements as done by python-Levenshtein/fuzzywuzzy */\nvar collator;\ntry {\n    collator = (typeof Intl !== \"undefined\" && typeof Intl.Collator !== \"undefined\") ? Intl.Collator(\"generic\", { sensitivity: \"base\" }) : null;\n} catch (err) {\n    if (typeof console !== undefined) console.warn(\"Collator could not be initialized and wouldn't be used\");\n}\n\nmodule.exports = function leven(a, b, options, regLeven) {\n    /** from https://github.com/sindresorhus/leven slightly modified to double weight replacements as done by python-Levenshtein/fuzzywuzzy */\n    var arr = [];\n    var charCodeCache = [];\n    var useCollator = (options && collator && options.useCollator);\n    var subcost = 1;\n    //to match behavior of python-Levenshtein and fuzzywuzzy, set to 2 in _ratio\n    if (options && options.subcost && typeof options.subcost === \"number\") subcost = options.subcost;\n\n    if (a === b) {\n        return 0;\n    }\n\n    var aLen = a.length;\n    var bLen = b.length;\n\n    if (aLen === 0) {\n        return bLen;\n    }\n\n    if (bLen === 0) {\n        return aLen;\n    }\n\n    function escapeRegExp(string) {\n        return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n    }\n\n    // not doing full check in _ratio as of now\n    if (options && options.wildcards && typeof options.wildcards === \"string\" && options.wildcards.length > 0) {\n        var wildchar;\n        var wildcode;\n        if (options.full_process === false && options.processed !== true) {\n            wildchar = options.wildcards[0];\n            wildcode = wildchar.charCodeAt(0);\n            var pattern = '[' + escapeRegExp(options.wildcards) + ']';\n            a = a.replace(new RegExp(pattern, \"g\"), wildchar);\n            b = b.replace(new RegExp(pattern, \"g\"), wildchar);\n            if (a === b) return 0; //check again post replacement\n        }\n        else {\n            wildchar = options.wildcards[0].toLowerCase();\n            wildcode = wildchar.charCodeAt(0);\n        }\n\n        var bCharCode;\n        var ret;\n        var tmp;\n        var tmp2;\n        var i = 0;\n        var j = 0;\n\n        while (i < aLen) {\n            charCodeCache[i] = a.charCodeAt(i);\n            arr[i] = ++i;\n        }\n        if (!useCollator) {  //checking for collator inside while 2x slower\n            while (j < bLen) {\n                bCharCode = b.charCodeAt(j);\n                tmp = j++;\n                ret = j;\n                for (i = 0; i < aLen; i++) {\n                    tmp2 = bCharCode === charCodeCache[i] || bCharCode === wildcode || charCodeCache[i] === wildcode ? tmp : tmp + subcost;\n                    tmp = arr[i];\n                    ret = arr[i] = tmp > ret ? tmp2 > ret ? ret + 1 : tmp2 : tmp2 > tmp ? tmp + 1 : tmp2;\n                }\n            }\n        }\n        else {\n            while (j < bLen) {\n                bCharCode = b.charCodeAt(j);\n                tmp = j++;\n                ret = j;\n\n                for (i = 0; i < aLen; i++) {\n                    tmp2 = 0 === collator.compare(String.fromCharCode(bCharCode), String.fromCharCode(charCodeCache[i]))\n                        || bCharCode === wildcode || charCodeCache[i] === wildcode ? tmp : tmp + subcost;\n                    tmp = arr[i];\n                    ret = arr[i] = tmp > ret ? tmp2 > ret ? ret + 1 : tmp2 : tmp2 > tmp ? tmp + 1 : tmp2;\n                }\n            }\n        }\n        return ret;\n    }\n    else {\n        return regLeven(a, b, options)\n    }\n}"]},"metadata":{},"sourceType":"script"}
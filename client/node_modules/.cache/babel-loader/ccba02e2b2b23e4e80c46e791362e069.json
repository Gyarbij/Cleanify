{"ast":null,"code":"module.exports = function (_clone_and_set_option_defaults, _isArray, QRatio, extract) {\n  module = {};\n\n  module.dedupe = function dedupe(contains_dupes, options_p) {\n    /**\n    * This convenience function takes a list of strings containing duplicates and uses fuzzy matching to identify\n    * and remove duplicates. Specifically, it uses extract to identify duplicates that\n    * score greater than a user defined threshold/cutoff. Then, it looks for the longest item in the duplicate list\n    * since we assume this item contains the most entity information and returns that. It breaks string\n    * length ties on an alphabetical sort.\n    * \n    * Note: as the threshold DECREASES the number of duplicates that are found INCREASES. This means that the\n    * returned deduplicated list will likely be shorter. Raise the threshold for fuzzy_dedupe to be less\n    * sensitive.\n    *\n    * @function dedupe\n    * @param {String[]|Object[]|Object} contains_dupes - array of strings, or array of choice objects if processor is supplied, or object of form {key: choice}\n    * @param {Object} [options_p] - Additional options.\n    * @param {boolean} [options_p.useCollator] - Whether to include map of matching items in results\n    * @param {function} [options_p.scorer] - takes two strings and returns a score\n    * @param {function} [options_p.processor] - takes each choice and outputs a string to be used for Scoring\n    * @param {number} [options_p.cutoff] - matching threshold 0-100, Default: 70\n    * @param {boolean} [options_p.useCollator] - Use `Intl.Collator` for locale-sensitive string comparison.\n    * @param {boolean} [options_p.astral] - use iLeven for scoring to properly handle astral symbols\n    * @param {boolean} [options_p.full_process] - Apply basic cleanup, non-alphanumeric to whitespace etc. if true. default true\n    * @param {boolean} [options_p.force_ascii] - Strip non-ascii in full_process if true (non-ascii will not become whtespace), only applied if full_process is true as well, default false\n    * @param {boolean} [options_p.trySimple] - try simple/partial ratio as part of (parial_)token_set_ratio test suite\n    * @param {number} [options_p.subcost] - Substitution cost, default 1 for distance, 2 for all ratios\n    * @param {string} [options_p.wildcards] - characters that will be used as wildcards if provided\n    * @param {boolean} [options_p.collapseWhitespace] - Collapse consecutive white space during full_process, default true\n    * @param {string} [options_p.normalize] - Normalize unicode representations\n    * @param {boolean} [options_p.keepmap] - keep the items mapped to this value, default false\n    * @param {boolean} [options_p.returnObjects] - return array of object instead of array of tuples\n    * @returns {Object[] | Array[]} - array of unique items and the index/key of the used match in contains_dupes.\n    */\n    var options = _clone_and_set_option_defaults(options_p);\n\n    if (!(_isArray(contains_dupes) || typeof contains_dupes === 'object')) {\n      throw new Error(\"contains_dupes must be an array or object\");\n      return;\n    }\n\n    if (Object.keys(contains_dupes).length === 0) {\n      if (typeof console !== undefined) console.warn(\"contains_dupes is empty\");\n      return [];\n    }\n\n    if (options.limit) {\n      if (typeof console !== undefined) console.warn(\"options.limit will be ignored in dedupe\");\n      options.limit = 0;\n    }\n\n    if (!options.cutoff || typeof options.cutoff !== 'number') {\n      if (typeof console !== undefined) console.warn(\"Using default cutoff of 70\");\n      options.cutoff = 70;\n    }\n\n    if (!options.scorer) {\n      options.scorer = QRatio;\n      if (typeof console !== undefined) console.log(\"Using default scorer 'ratio' for dedupe\");\n    } // extract will only run processor on choice so do here\n\n\n    var processor;\n\n    if (options.processor && typeof options.processor === \"function\") {\n      processor = options.processor;\n    } else processor = function processor(x) {\n      return x;\n    };\n\n    var uniqueItems = {};\n\n    for (var i in contains_dupes) {\n      var item = processor(contains_dupes[i]);\n\n      if (typeof item !== 'string' && item instanceof String === false) {\n        throw new Error(\"Each processed item in dedupe must be a string.\");\n      }\n\n      var matches = extract(item, contains_dupes, options);\n\n      if (options.returnObjects) {\n        if (matches.length === 1) {\n          if (options.keepmap) uniqueItems[processor(matches[0].choice)] = {\n            item: matches[0].choice,\n            key: matches[0].key,\n            matches: matches\n          };else uniqueItems[processor(matches[0].choice)] = {\n            item: matches[0].choice,\n            key: matches[0].key\n          };\n        } else {\n          // take longest, break tie by string compare\n          matches = matches.sort(function (a, b) {\n            var pa = processor(a.choice);\n            var pb = processor(b.choice);\n            var aLen = pa.length;\n            var bLen = pb.length;\n\n            if (aLen === bLen) {\n              if (pa < pb) return -1;else return 1;\n            } else return bLen - aLen;\n          });\n          if (options.keepmap) uniqueItems[processor(matches[0].choice)] = {\n            item: matches[0].choice,\n            key: matches[0].key,\n            matches: matches\n          };else uniqueItems[processor(matches[0].choice)] = {\n            item: matches[0].choice,\n            key: matches[0].key\n          };\n        }\n      } else {\n        if (matches.length === 1) {\n          if (options.keepmap) uniqueItems[processor(matches[0][0])] = [matches[0][0], matches[0][2], matches];else uniqueItems[processor(matches[0][0])] = [matches[0][0], matches[0][2]];\n        } else {\n          // take longest, break tie by string compare\n          matches = matches.sort(function (a, b) {\n            var pa = processor(a[0]);\n            var pb = processor(b[0]);\n            var aLen = pa.length;\n            var bLen = pb.length;\n\n            if (aLen === bLen) {\n              if (pa < pb) return -1;else return 1;\n            } else return bLen - aLen;\n          });\n          if (options.keepmap) uniqueItems[processor(matches[0][0])] = [matches[0][0], matches[0][2], matches];else uniqueItems[processor(matches[0][0])] = [matches[0][0], matches[0][2]];\n        }\n      }\n    }\n\n    var uniqueVals = [];\n\n    for (var u in uniqueItems) {\n      uniqueVals.push(uniqueItems[u]);\n    }\n\n    return uniqueVals;\n  };\n\n  return module;\n};","map":{"version":3,"sources":["/Users/armanrafati/Documents/Cleanify/client/node_modules/fuzzball/lib/process.js"],"names":["module","exports","_clone_and_set_option_defaults","_isArray","QRatio","extract","dedupe","contains_dupes","options_p","options","Error","Object","keys","length","console","undefined","warn","limit","cutoff","scorer","log","processor","x","uniqueItems","i","item","String","matches","returnObjects","keepmap","choice","key","sort","a","b","pa","pb","aLen","bLen","uniqueVals","u","push"],"mappings":"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","sourcesContent":["module.exports = function (_clone_and_set_option_defaults, _isArray, QRatio, extract) {\n\n    module = {};\n\n    module.dedupe = function dedupe(contains_dupes, options_p) {\n\n        /**\n        * This convenience function takes a list of strings containing duplicates and uses fuzzy matching to identify\n        * and remove duplicates. Specifically, it uses extract to identify duplicates that\n        * score greater than a user defined threshold/cutoff. Then, it looks for the longest item in the duplicate list\n        * since we assume this item contains the most entity information and returns that. It breaks string\n        * length ties on an alphabetical sort.\n        * \n        * Note: as the threshold DECREASES the number of duplicates that are found INCREASES. This means that the\n        * returned deduplicated list will likely be shorter. Raise the threshold for fuzzy_dedupe to be less\n        * sensitive.\n        *\n        * @function dedupe\n        * @param {String[]|Object[]|Object} contains_dupes - array of strings, or array of choice objects if processor is supplied, or object of form {key: choice}\n        * @param {Object} [options_p] - Additional options.\n        * @param {boolean} [options_p.useCollator] - Whether to include map of matching items in results\n        * @param {function} [options_p.scorer] - takes two strings and returns a score\n        * @param {function} [options_p.processor] - takes each choice and outputs a string to be used for Scoring\n        * @param {number} [options_p.cutoff] - matching threshold 0-100, Default: 70\n        * @param {boolean} [options_p.useCollator] - Use `Intl.Collator` for locale-sensitive string comparison.\n        * @param {boolean} [options_p.astral] - use iLeven for scoring to properly handle astral symbols\n        * @param {boolean} [options_p.full_process] - Apply basic cleanup, non-alphanumeric to whitespace etc. if true. default true\n        * @param {boolean} [options_p.force_ascii] - Strip non-ascii in full_process if true (non-ascii will not become whtespace), only applied if full_process is true as well, default false\n        * @param {boolean} [options_p.trySimple] - try simple/partial ratio as part of (parial_)token_set_ratio test suite\n        * @param {number} [options_p.subcost] - Substitution cost, default 1 for distance, 2 for all ratios\n        * @param {string} [options_p.wildcards] - characters that will be used as wildcards if provided\n        * @param {boolean} [options_p.collapseWhitespace] - Collapse consecutive white space during full_process, default true\n        * @param {string} [options_p.normalize] - Normalize unicode representations\n        * @param {boolean} [options_p.keepmap] - keep the items mapped to this value, default false\n        * @param {boolean} [options_p.returnObjects] - return array of object instead of array of tuples\n        * @returns {Object[] | Array[]} - array of unique items and the index/key of the used match in contains_dupes.\n        */\n\n        var options = _clone_and_set_option_defaults(options_p);\n\n        if (!(_isArray(contains_dupes) || typeof contains_dupes === 'object')) {\n            throw new Error(\"contains_dupes must be an array or object\");\n            return\n        }\n        if (Object.keys(contains_dupes).length === 0) {\n            if (typeof console !== undefined) console.warn(\"contains_dupes is empty\");\n            return [];\n        }\n        if (options.limit) {\n            if (typeof console !== undefined) console.warn(\"options.limit will be ignored in dedupe\");\n            options.limit = 0;\n        }\n\n        if (!options.cutoff || typeof options.cutoff !== 'number') {\n            if (typeof console !== undefined) console.warn(\"Using default cutoff of 70\");\n            options.cutoff = 70;\n        }\n\n        if (!options.scorer) {\n            options.scorer = QRatio;\n            if (typeof console !== undefined) console.log(\"Using default scorer 'ratio' for dedupe\");\n        }\n\n        // extract will only run processor on choice so do here\n        var processor;\n        if (options.processor && typeof options.processor === \"function\") {\n            processor = options.processor;\n        }\n        else processor = function (x) { return x; }\n\n        var uniqueItems = {};\n\n        for (var i in contains_dupes) {\n            var item = processor(contains_dupes[i]);\n\n            if (typeof item !== 'string' && item instanceof String === false) {\n                throw new Error(\"Each processed item in dedupe must be a string.\");\n            }\n\n            var matches = extract(item, contains_dupes, options);\n\n            if (options.returnObjects) {\n                if (matches.length === 1) {\n                    if (options.keepmap) uniqueItems[processor(matches[0].choice)] = { item: matches[0].choice, key: matches[0].key, matches: matches};\n                    else uniqueItems[processor(matches[0].choice)] = {item: matches[0].choice, key: matches[0].key};\n                }\n                else {\n                    // take longest, break tie by string compare\n                    matches = matches.sort(function (a, b) {\n                        var pa = processor(a.choice);\n                        var pb = processor(b.choice);\n                        var aLen = pa.length;\n                        var bLen = pb.length;\n                        if (aLen === bLen) {\n                            if (pa < pb) return -1;\n                            else return 1;\n                        }\n                        else return bLen - aLen;\n                    });\n                    if (options.keepmap) uniqueItems[processor(matches[0].choice)] = { item: matches[0].choice, key: matches[0].key, matches: matches };\n                    else uniqueItems[processor(matches[0].choice)] = {item: matches[0].choice, key: matches[0].key};\n                }\n            }\n            else {\n                if (matches.length === 1) {\n                    if (options.keepmap) uniqueItems[processor(matches[0][0])] = [matches[0][0], matches[0][2], matches];\n                    else uniqueItems[processor(matches[0][0])] = [matches[0][0], matches[0][2]];\n                }\n                else {\n                    // take longest, break tie by string compare\n                    matches = matches.sort(function (a, b) {\n                        var pa = processor(a[0]);\n                        var pb = processor(b[0]);\n                        var aLen = pa.length;\n                        var bLen = pb.length;\n                        if (aLen === bLen) {\n                            if (pa < pb) return -1;\n                            else return 1;\n                        }\n                        else return bLen - aLen;\n                    });\n                    if (options.keepmap) uniqueItems[processor(matches[0][0])] = [matches[0][0], matches[0][2], matches];\n                    else uniqueItems[processor(matches[0][0])] = [matches[0][0], matches[0][2]];\n                }\n            }            \n        }\n\n        var uniqueVals = [];\n\n        for (var u in uniqueItems) {\n            uniqueVals.push(uniqueItems[u]);\n        }\n\n        return uniqueVals;\n    }\n\n    return module\n}"]},"metadata":{},"sourceType":"script"}
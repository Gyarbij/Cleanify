{"ast":null,"code":"var _jsxFileName = \"/Users/armanrafati/Documents/Cleanify/client/src/contexts/GlobalContext.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GlobalContext = /*#__PURE__*/createContext(\"\");\n\nconst GlobalContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [token, setToken] = useState(\"\");\n  const [checkedPlaylist, setCheckedPlaylist] = useState();\n  const [playlists, setPlaylists] = useState();\n  const [tracks, setTracks] = useState();\n  const [cleanedPlaylistID, setCleanedPlaylistID] = useState();\n  const [songsToResolve, setSongsToResolve] = useState([]);\n  return /*#__PURE__*/_jsxDEV(GlobalContext.Provider, {\n    value: {\n      token,\n      setToken,\n      checkedPlaylist,\n      setCheckedPlaylist,\n      playlists,\n      setPlaylists,\n      tracks,\n      setTracks,\n      cleanedPlaylistID,\n      setCleanedPlaylistID,\n      songsToResolve,\n      setSongsToResolve\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n};\n\n_s(GlobalContextProvider, \"Fb/y7Kwrs1MbdFqePSHSQ/u/Zzg=\");\n\n_c = GlobalContextProvider;\nexport default GlobalContextProvider;\nexport const useGlobalState = () => {\n  _s2();\n\n  const context = useContext(GlobalContext);\n\n  if (!context) {\n    throw new Error(\"useGlobalState must be used inside the GlobalContext provider\");\n  }\n\n  return context;\n};\n\n_s2(useGlobalState, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"GlobalContextProvider\");","map":{"version":3,"sources":["/Users/armanrafati/Documents/Cleanify/client/src/contexts/GlobalContext.jsx"],"names":["createContext","useContext","useState","GlobalContext","GlobalContextProvider","children","token","setToken","checkedPlaylist","setCheckedPlaylist","playlists","setPlaylists","tracks","setTracks","cleanedPlaylistID","setCleanedPlaylistID","songsToResolve","setSongsToResolve","useGlobalState","context","Error"],"mappings":";;;;AAAA,SAASA,aAAT,EAAwBC,UAAxB,EAAoCC,QAApC,QAAoD,OAApD;;AAEA,MAAMC,aAAa,gBAAGH,aAAa,CAAC,EAAD,CAAnC;;AAEA,MAAMI,qBAAqB,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAC9C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACM,eAAD,EAAkBC,kBAAlB,IAAwCP,QAAQ,EAAtD;AACA,QAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,EAA1C;AACA,QAAM,CAACU,MAAD,EAASC,SAAT,IAAsBX,QAAQ,EAApC;AACA,QAAM,CAACY,iBAAD,EAAoBC,oBAApB,IAA4Cb,QAAQ,EAA1D;AACA,QAAM,CAACc,cAAD,EAAiBC,iBAAjB,IAAsCf,QAAQ,CAAC,EAAD,CAApD;AAEA,sBACE,QAAC,aAAD,CAAe,QAAf;AACE,IAAA,KAAK,EAAE;AACLI,MAAAA,KADK;AAELC,MAAAA,QAFK;AAGLC,MAAAA,eAHK;AAILC,MAAAA,kBAJK;AAKLC,MAAAA,SALK;AAMLC,MAAAA,YANK;AAOLC,MAAAA,MAPK;AAQLC,MAAAA,SARK;AASLC,MAAAA,iBATK;AAULC,MAAAA,oBAVK;AAWLC,MAAAA,cAXK;AAYLC,MAAAA;AAZK,KADT;AAAA,cAgBGZ;AAhBH;AAAA;AAAA;AAAA;AAAA,UADF;AAoBD,CA5BD;;GAAMD,qB;;KAAAA,qB;AA8BN,eAAeA,qBAAf;AAEA,OAAO,MAAMc,cAAc,GAAG,MAAM;AAAA;;AAClC,QAAMC,OAAO,GAAGlB,UAAU,CAACE,aAAD,CAA1B;;AAEA,MAAI,CAACgB,OAAL,EAAc;AACZ,UAAM,IAAIC,KAAJ,CACJ,+DADI,CAAN;AAGD;;AAED,SAAOD,OAAP;AACD,CAVM;;IAAMD,c","sourcesContent":["import { createContext, useContext, useState } from \"react\";\n\nconst GlobalContext = createContext(\"\");\n\nconst GlobalContextProvider = ({ children }) => {\n  const [token, setToken] = useState(\"\");\n  const [checkedPlaylist, setCheckedPlaylist] = useState();\n  const [playlists, setPlaylists] = useState();\n  const [tracks, setTracks] = useState();\n  const [cleanedPlaylistID, setCleanedPlaylistID] = useState();\n  const [songsToResolve, setSongsToResolve] = useState([]);\n\n  return (\n    <GlobalContext.Provider\n      value={{\n        token,\n        setToken,\n        checkedPlaylist,\n        setCheckedPlaylist,\n        playlists,\n        setPlaylists,\n        tracks,\n        setTracks,\n        cleanedPlaylistID,\n        setCleanedPlaylistID,\n        songsToResolve,\n        setSongsToResolve,\n      }}\n    >\n      {children}\n    </GlobalContext.Provider>\n  );\n};\n\nexport default GlobalContextProvider;\n\nexport const useGlobalState = () => {\n  const context = useContext(GlobalContext);\n\n  if (!context) {\n    throw new Error(\n      \"useGlobalState must be used inside the GlobalContext provider\"\n    );\n  }\n\n  return context;\n};\n"]},"metadata":{},"sourceType":"module"}
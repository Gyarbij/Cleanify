{"ast":null,"code":"import _asyncToGenerator from\"/Users/armanrafati/Documents/Cleanify/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/Users/armanrafati/Documents/Cleanify/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _regeneratorRuntime from\"/Users/armanrafati/Documents/Cleanify/client/node_modules/@babel/runtime/regenerator/index.js\";import{useEffect,useMemo,useState}from\"react\";import{useGlobalState}from\"../../contexts/GlobalContext\";import{getTracks}from\"../../utils/api\";import CustomTable from\"./CustomTable\";import{jsx as _jsx}from\"react/jsx-runtime\";var CleanSongTable=function CleanSongTable(_ref){var title=_ref.title;var _useGlobalState=useGlobalState(),cleanedPlaylistID=_useGlobalState.cleanedPlaylistID;var _useState=useState(),_useState2=_slicedToArray(_useState,2),cleanedTracks=_useState2[0],setCleanedTracks=_useState2[1];useEffect(function(){var getCleanedTracks=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.t0=setCleanedTracks;_context.next=3;return getTracks(cleanedPlaylistID);case 3:_context.t1=_context.sent;(0,_context.t0)(_context.t1);case 5:case\"end\":return _context.stop();}}},_callee);}));return function getCleanedTracks(){return _ref2.apply(this,arguments);};}();getCleanedTracks();},[cleanedPlaylistID]);var columns=useMemo(function(){return[{Header:title,accessor:\"name\"}];},[title]);var data=[];cleanedTracks&&cleanedTracks.items.map(function(t){return data.push({name:t.track.name});});return/*#__PURE__*/_jsx(CustomTable,{hasRadio:false,columns:columns,data:data});};export default CleanSongTable;","map":{"version":3,"sources":["/Users/armanrafati/Documents/Cleanify/client/src/components/Tables/CleanSongTable.jsx"],"names":["useEffect","useMemo","useState","useGlobalState","getTracks","CustomTable","CleanSongTable","title","cleanedPlaylistID","cleanedTracks","setCleanedTracks","getCleanedTracks","columns","Header","accessor","data","items","map","t","push","name","track"],"mappings":"yYAAA,OAASA,SAAT,CAAoBC,OAApB,CAA6BC,QAA7B,KAA6C,OAA7C,CACA,OAASC,cAAT,KAA+B,8BAA/B,CACA,OAASC,SAAT,KAA0B,iBAA1B,CACA,MAAOC,CAAAA,WAAP,KAAwB,eAAxB,C,2CACA,GAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,MAAe,IAAZC,CAAAA,KAAY,MAAZA,KAAY,CACpC,oBAA8BJ,cAAc,EAA5C,CAAQK,iBAAR,iBAAQA,iBAAR,CACA,cAA0CN,QAAQ,EAAlD,wCAAOO,aAAP,eAAsBC,gBAAtB,eACAV,SAAS,CAAC,UAAM,CACd,GAAMW,CAAAA,gBAAgB,2FAAG,+IACvBD,gBADuB,uBACAN,CAAAA,SAAS,CAACI,iBAAD,CADT,qHAAH,kBAAhBG,CAAAA,gBAAgB,2CAAtB,CAGAA,gBAAgB,GACjB,CALQ,CAKN,CAACH,iBAAD,CALM,CAAT,CAMA,GAAMI,CAAAA,OAAO,CAAGX,OAAO,CACrB,iBAAM,CACJ,CACEY,MAAM,CAAEN,KADV,CAEEO,QAAQ,CAAE,MAFZ,CADI,CAAN,EADqB,CAOrB,CAACP,KAAD,CAPqB,CAAvB,CASA,GAAMQ,CAAAA,IAAI,CAAG,EAAb,CAEAN,aAAa,EACXA,aAAa,CAACO,KAAd,CAAoBC,GAApB,CAAwB,SAACC,CAAD,QAAOH,CAAAA,IAAI,CAACI,IAAL,CAAU,CAAEC,IAAI,CAAEF,CAAC,CAACG,KAAF,CAAQD,IAAhB,CAAV,CAAP,EAAxB,CADF,CAEA,mBAAO,KAAC,WAAD,EAAa,QAAQ,CAAE,KAAvB,CAA8B,OAAO,CAAER,OAAvC,CAAgD,IAAI,CAAEG,IAAtD,EAAP,CACD,CAvBD,CAyBA,cAAeT,CAAAA,cAAf","sourcesContent":["import { useEffect, useMemo, useState } from \"react\";\nimport { useGlobalState } from \"../../contexts/GlobalContext\";\nimport { getTracks } from \"../../utils/api\";\nimport CustomTable from \"./CustomTable\";\nconst CleanSongTable = ({ title }) => {\n  const { cleanedPlaylistID } = useGlobalState();\n  const [cleanedTracks, setCleanedTracks] = useState();\n  useEffect(() => {\n    const getCleanedTracks = async () => {\n      setCleanedTracks(await getTracks(cleanedPlaylistID));\n    };\n    getCleanedTracks();\n  }, [cleanedPlaylistID]);\n  const columns = useMemo(\n    () => [\n      {\n        Header: title,\n        accessor: \"name\",\n      },\n    ],\n    [title]\n  );\n  const data = [];\n\n  cleanedTracks &&\n    cleanedTracks.items.map((t) => data.push({ name: t.track.name }));\n  return <CustomTable hasRadio={false} columns={columns} data={data} />;\n};\n\nexport default CleanSongTable;\n"]},"metadata":{},"sourceType":"module"}
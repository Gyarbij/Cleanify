{"ast":null,"code":"(function () {\n  /** @module fuzzball */\n  'use strict';\n\n  var SequenceMatcher = require('./lib/fbdifflib.js');\n\n  var Heap = require('heap');\n\n  var _intersect = require('./lib/lodash.custom.min.js').intersection;\n\n  var _intersectWith = require('./lib/lodash.custom.min.js').intersectionWith;\n\n  var _difference = require('./lib/lodash.custom.min.js').difference;\n\n  var _differenceWith = require('./lib/lodash.custom.min.js').differenceWith;\n\n  var _uniq = require('./lib/lodash.custom.min.js').uniq;\n\n  var _uniqWith = require('./lib/lodash.custom.min.js').uniqWith;\n\n  var _partialRight = require('./lib/lodash.custom.min.js').partialRight;\n\n  var _forEach = require('./lib/lodash.custom.min.js').forEach;\n\n  var _keys = require('./lib/lodash.custom.min.js').keys;\n\n  var _isArray = require('./lib/lodash.custom.min.js').isArray;\n\n  var _toArray = require('./lib/lodash.custom.min.js').toArray;\n\n  var _orderBy = require('./lib/lodash.custom.min.js').orderBy;\n\n  function orderByDesc(arr, cmp) {\n    var mapped = arr.map(function (str) {\n      return {\n        key: str,\n        value: cmp(str)\n      };\n    });\n    mapped.sort(function (a, b) {\n      return b.value - a.value;\n    });\n    return mapped.map(function (item) {\n      return item.key;\n    });\n  }\n\n  var iLeven = require('./lib/iLeven.js');\n\n  var wildleven = require('./lib/wildcardLeven.js');\n\n  var leven = require('./lib/leven.js');\n\n  if (typeof setImmediate !== 'function') {\n    require('setimmediate');\n  } // didn't run in tiny-worker without extra check\n\n\n  var utils = require('./lib/utils.js')(_uniq, _uniqWith, _partialRight);\n\n  var validate = utils.validate;\n  var process_and_sort = utils.process_and_sort;\n  var tokenize = utils.tokenize;\n  var full_process = utils.full_process;\n  var clone_and_set_option_defaults = utils.clone_and_set_option_defaults;\n  var isCustomFunc = utils.isCustomFunc;\n\n  var processing = require('./lib/process.js')(clone_and_set_option_defaults, _isArray, QRatio, extract);\n\n  var dedupe = processing.dedupe;\n  /** Mostly follows after python fuzzywuzzy, https://github.com/seatgeek/fuzzywuzzy */\n\n  /** Public functions */\n\n  function distance(str1, str2, options_p) {\n    /**\n     * Calculate levenshtein distance of the two strings.\n     *\n     * @function distance\n     * @param {string} str1 - the first string.\n     * @param {string} str2 - the second string.\n     * @param {Object} [options_p] - Additional options.\n     * @param {boolean} [options_p.useCollator] - Use `Intl.Collator` for locale-sensitive string comparison.\n     * @param {boolean} [options_p.full_process] - Apply basic cleanup, non-alphanumeric to whitespace etc. if true. default true\n     * @param {boolean} [options_p.force_ascii] - Strip non-ascii in full_process if true (non-ascii will not become whtespace), only applied if full_process is true as well, default true\n     * @param {boolean} [options_p.collapseWhitespace] - Collapse consecutive white space during full_process, default true\n     * @param {string} [options_p.wildcards] - characters that will be used as wildcards if provided\n     * @param {number} [options_p.astral] - Use astral aware calculation\n     * @param {string} [options_p.normalize] - Normalize unicode representations\n     * @returns {number} - the levenshtein distance (0 and above).\n     */\n    var options = clone_and_set_option_defaults(options_p);\n    str1 = options.full_process ? full_process(str1, options) : str1;\n    str2 = options.full_process ? full_process(str2, options) : str2;\n    if (typeof options.subcost === \"undefined\") options.subcost = 1;\n    if (options.astral) return iLeven(str1, str2, options, _toArray);else return wildleven(str1, str2, options, leven); // falls back to leven if no wildcards\n  }\n\n  function QRatio(str1, str2, options_p) {\n    /**\n     * Calculate levenshtein ratio of the two strings.\n     *\n     * @function ratio\n     * @param {string} str1 - the first string.\n     * @param {string} str2 - the second string.\n     * @param {Object} [options_p] - Additional options.\n     * @param {boolean} [options_p.useCollator] - Use `Intl.Collator` for locale-sensitive string comparison.\n     * @param {boolean} [options_p.full_process] - Apply basic cleanup, non-alphanumeric to whitespace etc. if true. default true\n     * @param {boolean} [options_p.force_ascii] - Strip non-ascii in full_process if true (non-ascii will not become whtespace), only applied if full_process is true as well, default true\n     * @param {boolean} [options_p.collapseWhitespace] - Collapse consecutive white space during full_process, default true\n     * @param {string} [options_p.wildcards] - characters that will be used as wildcards if provided\n     * @param {number} [options_p.astral] - Use astral aware calculation\n     * @param {string} [options_p.normalize] - Normalize unicode representations\n     * @returns {number} - the levenshtein ratio (0-100).\n     */\n    var options = clone_and_set_option_defaults(options_p);\n    str1 = options.full_process ? full_process(str1, options) : str1;\n    str2 = options.full_process ? full_process(str2, options) : str2;\n    if (!validate(str1)) return 0;\n    if (!validate(str2)) return 0;\n    return _ratio(str1, str2, options);\n  }\n\n  function partial_ratio(str1, str2, options_p) {\n    /**\n     * Calculate partial levenshtein ratio of the two strings.\n     *\n     * @function partial_ratio\n     * @param {string} str1 - the first string.\n     * @param {string} str2 - the second string.\n     * @param {Object} [options_p] - Additional options.\n     * @param {boolean} [options_p.useCollator] - Use `Intl.Collator` for locale-sensitive string comparison.\n     * @param {boolean} [options_p.full_process] - Apply basic cleanup, non-alphanumeric to whitespace etc. if true. default true\n     * @param {boolean} [options_p.force_ascii] - Strip non-ascii in full_process if true (non-ascii will not become whtespace), only applied if full_process is true as well, default true\n     * @param {boolean} [options_p.collapseWhitespace] - Collapse consecutive white space during full_process, default true\n     * @param {string} [options_p.wildcards] - characters that will be used as wildcards if provided\n     * @param {number} [options_p.astral] - Use astral aware calculation\n     * @param {string} [options_p.normalize] - Normalize unicode representations\n     * @returns {number} - the levenshtein ratio (0-100).\n     */\n    var options = clone_and_set_option_defaults(options_p);\n    str1 = options.full_process ? full_process(str1, options) : str1;\n    str2 = options.full_process ? full_process(str2, options) : str2;\n    if (!validate(str1)) return 0;\n    if (!validate(str2)) return 0;\n    return _partial_ratio(str1, str2, options);\n  }\n\n  function token_set_ratio(str1, str2, options_p) {\n    /**\n     * Calculate token set ratio of the two strings.\n     *\n     * @function token_set_ratio\n     * @param {string} str1 - the first string.\n     * @param {string} str2 - the second string.\n     * @param {Object} [options_p] - Additional options.\n     * @param {boolean} [options_p.useCollator] - Use `Intl.Collator` for locale-sensitive string comparison.\n     * @param {boolean} [options_p.full_process] - Apply basic cleanup, non-alphanumeric to whitespace etc. if true. default true\n     * @param {boolean} [options_p.force_ascii] - Strip non-ascii in full_process if true (non-ascii will not become whtespace), only applied if full_process is true as well, default true\n     * @param {boolean} [options_p.trySimple] - try simple/partial ratio as part of (parial_)token_set_ratio test suite\n     * @param {boolean} [options_p.sortBySimilarity] - sort tokens by similarity to each other before combining instead of alphabetically\n     * @param {string} [options_p.wildcards] - characters that will be used as wildcards if provided\n     * @param {number} [options_p.astral] - Use astral aware calculation\n     * @param {string} [options_p.normalize] - Normalize unicode representations\n     * @returns {number} - the levenshtein ratio (0-100).\n     */\n    var options = clone_and_set_option_defaults(options_p);\n    str1 = options.full_process ? full_process(str1, options) : str1;\n    str2 = options.full_process ? full_process(str2, options) : str2;\n    if (!validate(str1)) return 0;\n    if (!validate(str2)) return 0;\n    return _token_set(str1, str2, options);\n  }\n\n  function partial_token_set_ratio(str1, str2, options_p) {\n    /**\n     * Calculate partial token ratio of the two strings.\n     *\n     * @function partial_token_set_ratio\n     * @param {string} str1 - the first string.\n     * @param {string} str2 - the second string.\n     * @param {Object} [options_p] - Additional options.\n     * @param {boolean} [options_p.useCollator] - Use `Intl.Collator` for locale-sensitive string comparison.\n     * @param {boolean} [options_p.full_process] - Apply basic cleanup, non-alphanumeric to whitespace etc. if true. default true\n     * @param {boolean} [options_p.force_ascii] - Strip non-ascii in full_process if true (non-ascii will not become whtespace), only applied if full_process is true as well, default true\n     * @param {boolean} [options_p.trySimple] - try simple/partial ratio as part of (parial_)token_set_ratio test suite\n     * @param {boolean} [options_p.sortBySimilarity] - sort tokens by similarity to each other before combining instead of alphabetically\n     * @param {string} [options_p.wildcards] - characters that will be used as wildcards if provided\n     * @param {number} [options_p.astral] - Use astral aware calculation\n     * @param {string} [options_p.normalize] - Normalize unicode representations\n     * @returns {number} - the levenshtein ratio (0-100).\n     */\n    var options = clone_and_set_option_defaults(options_p);\n    str1 = options.full_process ? full_process(str1, options) : str1;\n    str2 = options.full_process ? full_process(str2, options) : str2;\n    if (!validate(str1)) return 0;\n    if (!validate(str2)) return 0;\n    options.partial = true;\n    return _token_set(str1, str2, options);\n  }\n\n  function token_sort_ratio(str1, str2, options_p) {\n    /**\n     * Calculate token sort ratio of the two strings.\n     *\n     * @function token_sort_ratio\n     * @param {string} str1 - the first string.\n     * @param {string} str2 - the second string.\n     * @param {Object} [options_p] - Additional options.\n     * @param {boolean} [options_p.useCollator] - Use `Intl.Collator` for locale-sensitive string comparison.\n     * @param {boolean} [options_p.full_process] - Apply basic cleanup, non-alphanumeric to whitespace etc. if true. default true\n     * @param {boolean} [options_p.force_ascii] - Strip non-ascii in full_process if true (non-ascii will not become whtespace), only applied if full_process is true as well, default true\n     * @param {string} [options_p.wildcards] - characters that will be used as wildcards if provided\n     * @param {number} [options_p.astral] - Use astral aware calculation\n     * @param {string} [options_p.normalize] - Normalize unicode representations\n     * @returns {number} - the levenshtein ratio (0-100).\n     */\n    var options = clone_and_set_option_defaults(options_p);\n    str1 = options.full_process ? full_process(str1, options) : str1;\n    str2 = options.full_process ? full_process(str2, options) : str2;\n    if (!validate(str1)) return 0;\n    if (!validate(str2)) return 0;\n\n    if (!options.proc_sorted) {\n      str1 = process_and_sort(str1);\n      str2 = process_and_sort(str2);\n    }\n\n    return _ratio(str1, str2, options);\n  }\n\n  function partial_token_sort_ratio(str1, str2, options_p) {\n    /**\n     * Calculate partial token sort ratio of the two strings.\n     *\n     * @function partial_token_sort_ratio\n     * @param {string} str1 - the first string.\n     * @param {string} str2 - the second string.\n     * @param {Object} [options_p] - Additional options.\n     * @param {boolean} [options_p.useCollator] - Use `Intl.Collator` for locale-sensitive string comparison.\n     * @param {boolean} [options_p.full_process] - Apply basic cleanup, non-alphanumeric to whitespace etc. if true. default true\n     * @param {boolean} [options_p.force_ascii] - Strip non-ascii in full_process if true (non-ascii will not become whtespace), only applied if full_process is true as well, default true\n     * @param {string} [options_p.wildcards] - characters that will be used as wildcards if provided\n     * @param {number} [options_p.astral] - Use astral aware calculation\n     * @param {string} [options_p.normalize] - Normalize unicode representations\n     * @returns {number} - the levenshtein ratio (0-100).\n     */\n    var options = clone_and_set_option_defaults(options_p);\n    str1 = options.full_process ? full_process(str1, options) : str1;\n    str2 = options.full_process ? full_process(str2, options) : str2;\n    if (!validate(str1)) return 0;\n    if (!validate(str2)) return 0;\n    options.partial = true;\n\n    if (!options.proc_sorted) {\n      str1 = process_and_sort(str1);\n      str2 = process_and_sort(str2);\n    }\n\n    return _partial_ratio(str1, str2, options);\n  }\n\n  function token_similarity_sort_ratio(str1, str2, options_p) {\n    /**\n     * Calculate token sort ratio of the two strings.\n     *\n     * @function token_similarity_sort_ratio\n     * @param {string} str1 - the first string.\n     * @param {string} str2 - the second string.\n     * @param {Object} [options_p] - Additional options.\n     * @param {boolean} [options_p.useCollator] - Use `Intl.Collator` for locale-sensitive string comparison.\n     * @param {boolean} [options_p.full_process] - Apply basic cleanup, non-alphanumeric to whitespace etc. if true. default true\n     * @param {boolean} [options_p.force_ascii] - Strip non-ascii in full_process if true (non-ascii will not become whtespace), only applied if full_process is true as well, default true\n     * @param {string} [options_p.wildcards] - characters that will be used as wildcards if provided\n     * @param {number} [options_p.astral] - Use astral aware calculation\n     * @param {string} [options_p.normalize] - Normalize unicode representations\n     * @returns {number} - the levenshtein ratio (0-100).\n     */\n    var options = clone_and_set_option_defaults(options_p);\n    str1 = options.full_process ? full_process(str1, options) : str1;\n    str2 = options.full_process ? full_process(str2, options) : str2;\n    if (!validate(str1)) return 0;\n    if (!validate(str2)) return 0;\n    /* if (!options.proc_sorted) {\n        str1 = process_and_sort(str1);\n        str2 = process_and_sort(str2);\n    } */\n\n    return _token_similarity_sort_ratio(str1, str2, options);\n  }\n\n  function partial_token_similarity_sort_ratio(str1, str2, options_p) {\n    /**\n     * Calculate token sort ratio of the two strings.\n     *\n     * @function partial_token_similarity_sort_ratio\n     * @param {string} str1 - the first string.\n     * @param {string} str2 - the second string.\n     * @param {Object} [options_p] - Additional options.\n     * @param {boolean} [options_p.useCollator] - Use `Intl.Collator` for locale-sensitive string comparison.\n     * @param {boolean} [options_p.full_process] - Apply basic cleanup, non-alphanumeric to whitespace etc. if true. default true\n     * @param {boolean} [options_p.force_ascii] - Strip non-ascii in full_process if true (non-ascii will not become whtespace), only applied if full_process is true as well, default true\n     * @param {string} [options_p.wildcards] - characters that will be used as wildcards if provided\n     * @param {number} [options_p.astral] - Use astral aware calculation\n     * @param {string} [options_p.normalize] - Normalize unicode representations\n     * @returns {number} - the levenshtein ratio (0-100).\n     */\n    var options = clone_and_set_option_defaults(options_p);\n    str1 = options.full_process ? full_process(str1, options) : str1;\n    str2 = options.full_process ? full_process(str2, options) : str2;\n    if (!validate(str1)) return 0;\n    if (!validate(str2)) return 0;\n    /* if (!options.proc_sorted) {\n        str1 = process_and_sort(str1);\n        str2 = process_and_sort(str2);\n    } */\n\n    options.partial = true;\n    return _token_similarity_sort_ratio(str1, str2, options);\n  }\n\n  function WRatio(str1, str2, options_p) {\n    /**\n     * Calculate weighted ratio of the two strings, taking best score of various methods.\n     *\n     * @function WRatio\n     * @param {string} str1 - the first string.\n     * @param {string} str2 - the second string.\n     * @param {Object} [options_p] - Additional options.\n     * @param {boolean} [options_p.useCollator] - Use `Intl.Collator` for locale-sensitive string comparison.\n     * @param {boolean} [options_p.full_process] - Apply basic cleanup, non-alphanumeric to whitespace etc. if true. default true\n     * @param {boolean} [options_p.force_ascii] - Strip non-ascii in full_process if true (non-ascii will not become whtespace), only applied if full_process is true as well, default true\n     * @param {boolean} [options_p.collapseWhitespace] - Collapse consecutive white space during full_process, default true\n     * @param {string} [options_p.wildcards] - characters that will be used as wildcards if provided\n     * @param {number} [options_p.astral] - Use astral aware calculation\n     * @param {string} [options_p.normalize] - Normalize unicode representations\n     * @returns {number} - the levenshtein ratio (0-100).\n     */\n    var options = clone_and_set_option_defaults(options_p); //str1 = full_process(str1, options);  //fuzzywuzzy runs no matter what, reason? going by options.full_process\n    //str2 = full_process(str2, options);\n\n    str1 = options.full_process ? full_process(str1, options) : str1;\n    str2 = options.full_process ? full_process(str2, options) : str2;\n    options.full_process = false;\n    if (!validate(str1)) return 0;\n    if (!validate(str2)) return 0;\n    var try_partial = true;\n    var unbase_scale = .95;\n    var partial_scale = .90;\n\n    var base = _ratio(str1, str2, options);\n\n    var len_ratio = Math.max(str1.length, str2.length) / Math.min(str1.length, str2.length);\n    if (len_ratio < 1.5) try_partial = false;\n    if (len_ratio > 8) partial_scale = .6;\n\n    if (try_partial) {\n      var partial = _partial_ratio(str1, str2, options) * partial_scale;\n      var ptsor = partial_token_sort_ratio(str1, str2, options) * unbase_scale * partial_scale;\n      var ptser = partial_token_set_ratio(str1, str2, options) * unbase_scale * partial_scale;\n      return Math.round(Math.max(base, partial, ptsor, ptser));\n    } else {\n      var tsor = token_sort_ratio(str1, str2, options) * unbase_scale;\n      var tser = token_set_ratio(str1, str2, options) * unbase_scale;\n      return Math.round(Math.max(base, tsor, tser));\n    }\n  }\n\n  function extract(query, choices, options_p) {\n    /**\n     * Return the top scoring items from an array (or assoc array) of choices\n     *\n     * @function extract\n     * @param query - the search term.\n     * @param {String[]|Object[]|Object} choices - array of strings, or array of choice objects if processor is supplied, or object of form {key: choice}\n     * @param {Object} [options_p] - Additional options.\n     * @param {function} [options_p.scorer] - takes two values and returns a score, will be passed options as 3rd argument\n     * @param {function} [options_p.processor] - takes each choice and outputs a value to be used for Scoring\n     * @param {number} [options_p.limit] - optional max number of results to return, returns all if not supplied\n     * @param {number} [options_p.cutoff] - minimum score that will get returned 0-100\n     * @param {boolean} [options_p.useCollator] - Use `Intl.Collator` for locale-sensitive string comparison.\n     * @param {number} [options_p.astral] - Use astral aware calculation\n     * @param {string} [options_p.normalize] - Normalize unicode representations\n     * @param {boolean} [options_p.full_process] - Apply basic cleanup, non-alphanumeric to whitespace etc. if true. default true\n     * @param {boolean} [options_p.force_ascii] - Strip non-ascii in full_process if true (non-ascii will not become whtespace), only applied if full_process is true as well, default false\n     * @param {boolean} [options_p.collapseWhitespace] - Collapse consecutive white space during full_process, default true\n     * @param {boolean} [options_p.trySimple] - try simple/partial ratio as part of (parial_)token_set_ratio test suite\n     * @param {boolean} [options_p.sortBySimilarity] - sort tokens by similarity to each other before combining instead of alphabetically\n     * @param {string} [options_p.wildcards] - characters that will be used as wildcards if provided\n     * @param {boolean} [options_p.returnObjects] - return array of object instead of array of tuples; default false\n     * @returns {Array[] | Object[]} - array of choice results with their computed ratios (0-100).\n     */\n    var options = clone_and_set_option_defaults(options_p);\n    var numchoices;\n\n    if (_isArray(choices)) {\n      numchoices = choices.length;\n    } else if (!(choices instanceof Object)) {\n      throw new Error(\"Invalid choices\");\n    } else numchoices = _keys(choices).length;\n\n    if (!choices || numchoices === 0) {\n      if (typeof console !== undefined) console.warn(\"No choices\");\n      return [];\n    }\n\n    if (options.processor && typeof options.processor !== \"function\") {\n      throw new Error(\"Invalid Processor\");\n    }\n\n    if (!options.processor) options.processor = function (x) {\n      return x;\n    };\n\n    if (options.scorer && typeof options.scorer !== \"function\") {\n      throw new Error(\"Invalid Scorer\");\n    }\n\n    if (!options.scorer) {\n      options.scorer = QRatio;\n    }\n\n    var isCustom = isCustomFunc(options.scorer); // check if func name is one of fuzzball's, so don't use same names..\n\n    if (!options.cutoff || typeof options.cutoff !== \"number\") {\n      options.cutoff = -1;\n    }\n\n    var pre_processor = function (choice, force_ascii) {\n      return choice;\n    };\n\n    if (options.full_process) {\n      pre_processor = full_process;\n      if (!isCustom) options.processed = true; // to let wildcardLeven know and not run again after we set fp to false below\n    }\n\n    var normalize = false;\n\n    if (!isCustom) {\n      // if custom scorer func let scorer handle it\n      query = pre_processor(query, options);\n      options.full_process = false;\n\n      if (options.astral && options.normalize) {\n        options.normalize = false; // don't normalize again in ratio if doing here\n\n        if (String.prototype.normalize) {\n          normalize = true;\n          query = query.normalize();\n        } else {\n          if (typeof console !== undefined) console.warn(\"Normalization not supported in your environment\");\n        }\n      }\n\n      if (query.length === 0) if (typeof console !== undefined) console.warn(\"Processed query is empty string\");\n    }\n\n    var results = [];\n    var anyblank = false;\n    var tsort = false;\n    var tset = false;\n\n    if (options.scorer.name === \"token_sort_ratio\" || options.scorer.name === \"partial_token_sort_ratio\") {\n      var proc_sorted_query = process_and_sort(query);\n      tsort = true;\n    } else if (options.scorer.name === \"token_set_ratio\" || options.scorer.name === \"partial_token_set_ratio\") {\n      var query_tokens = tokenize(query, options);\n      tset = true;\n    }\n\n    var result, mychoice, cmpHeap, cmpSort;\n\n    if (options.returnObjects) {\n      cmpHeap = function (a, b) {\n        return a.score - b.score;\n      };\n\n      cmpSort = function (a, b) {\n        return b.score - a.score;\n      };\n    } else {\n      cmpHeap = function (a, b) {\n        return a[1] - b[1];\n      };\n\n      cmpSort = function (a, b) {\n        return b[1] - a[1];\n      };\n    }\n\n    _forEach(choices, function (value, key) {\n      options.tokens = undefined;\n      options.proc_sorted = false;\n\n      if (tsort) {\n        options.proc_sorted = true;\n        if (value && value.proc_sorted) mychoice = value.proc_sorted;else {\n          mychoice = pre_processor(options.processor(value), options);\n          mychoice = process_and_sort(normalize ? mychoice.normalize() : mychoice);\n        }\n        result = options.scorer(proc_sorted_query, mychoice, options);\n      } else if (tset) {\n        mychoice = \"x\"; //dummy string so it validates, if either tokens is [] all 3 tests will still be 0\n\n        if (value && value.tokens) {\n          options.tokens = [query_tokens, value.tokens];\n          if (options.trySimple) mychoice = pre_processor(options.processor(value), options);\n        } else {\n          mychoice = pre_processor(options.processor(value), options);\n          options.tokens = [query_tokens, tokenize(normalize ? mychoice.normalize() : mychoice, options)];\n        } //query and mychoice only used for validation here unless trySimple = true\n\n\n        result = options.scorer(query, mychoice, options);\n      } else if (isCustom) {\n        // options.full_process should be unmodified, don't pre-process here since mychoice maybe not string\n        mychoice = options.processor(value);\n        result = options.scorer(query, mychoice, options);\n      } else {\n        mychoice = pre_processor(options.processor(value), options);\n        if (typeof mychoice !== \"string\" || mychoice.length === 0) anyblank = true;\n        if (normalize && typeof mychoice === \"string\") mychoice = mychoice.normalize();\n        result = options.scorer(query, mychoice, options);\n      }\n\n      if (result > options.cutoff) {\n        if (options.returnObjects) results.push({\n          choice: value,\n          score: result,\n          key: key\n        });else results.push([value, result, key]);\n      }\n    });\n\n    if (anyblank) if (typeof console !== undefined) console.log(\"One or more choices were empty. (post-processing if applied)\");\n\n    if (options.limit && typeof options.limit === \"number\" && options.limit > 0 && options.limit < numchoices && !options.unsorted) {\n      results = Heap.nlargest(results, options.limit, cmpHeap);\n    } else if (!options.unsorted) {\n      results = results.sort(cmpSort);\n    }\n\n    return results;\n  }\n\n  function extractAsync(query, choices, options_p, callback) {\n    /**\n     * Return the top scoring items from an array (or assoc array) of choices\n     *\n     * @function extractAsync\n     * @param query - the search term.\n     * @param {String[]|Object[]|Object} choices - array of strings, or array of choice objects if processor is supplied, or object of form {key: choice}\n     * @param {Object} [options_p] - Additional options.\n     * @param {function} [options_p.scorer] - takes two values and returns a score, will be passed options as 3rd argument\n     * @param {function} [options_p.processor] - takes each choice and outputs a value to be used for Scoring\n     * @param {number} [options_p.limit] - optional max number of results to return, returns all if not supplied\n     * @param {number} [options_p.cutoff] - minimum score that will get returned 0-100\n     * @param {boolean} [options_p.useCollator] - Use `Intl.Collator` for locale-sensitive string comparison.\n     * @param {number} [options_p.astral] - Use astral aware calculation\n     * @param {string} [options_p.normalize] - Normalize unicode representations\n     * @param {boolean} [options_p.full_process] - Apply basic cleanup, non-alphanumeric to whitespace etc. if true. default true\n     * @param {boolean} [options_p.force_ascii] - Strip non-ascii in full_process if true (non-ascii will not become whtespace), only applied if full_process is true as well, default false\n     * @param {boolean} [options_p.collapseWhitespace] - Collapse consecutive white space during full_process, default true\n     * @param {boolean} [options_p.trySimple] - try simple/partial ratio as part of (parial_)token_set_ratio test suite\n     * @param {boolean} [options_p.sortBySimilarity] - sort tokens by similarity to each other before combining instead of alphabetically\n     * @param {string} [options_p.wildcards] - characters that will be used as wildcards if provided\n     * @param {boolean} [options_p.returnObjects] - return array of object instead of array of tuples; default false\n     * @param {Object} [options_p.abortController] - track abortion\n     * @param {Object} [options_p.cancelToken] - track cancellation\n     * @param {number} [options_p.asyncLoopOffset] - number of rows to run in between every async loop iteration, default 256\n     * @param {function} callback - node style callback (err, arrayOfResults)\n     */\n    var options = clone_and_set_option_defaults(options_p);\n    var abortController;\n\n    if (typeof options_p.abortController === \"object\") {\n      abortController = options_p.abortController;\n    }\n\n    var cancelToken;\n\n    if (typeof options_p.cancelToken === \"object\") {\n      cancelToken = options_p.cancelToken;\n    }\n\n    var loopOffset = 256;\n\n    if (typeof options.asyncLoopOffset === 'number') {\n      if (options.asyncLoopOffset < 1) loopOffset = 1;else loopOffset = options.asyncLoopOffset;\n    }\n\n    var isArray = false;\n    var numchoices;\n\n    if (choices && choices.length && _isArray(choices)) {\n      numchoices = choices.length;\n      isArray = true; //if array don't check hasOwnProperty every time below\n    } else if (!(choices instanceof Object)) {\n      callback(new Error(\"Invalid choices\"));\n      return;\n    } else numchoices = Object.keys(choices).length;\n\n    if (!choices || numchoices === 0) {\n      if (typeof console !== undefined) console.warn(\"No choices\");\n      callback(null, []);\n      return;\n    }\n\n    if (options.processor && typeof options.processor !== \"function\") {\n      callback(new Error(\"Invalid Processor\"));\n      return;\n    }\n\n    if (!options.processor) options.processor = function (x) {\n      return x;\n    };\n\n    if (options.scorer && typeof options.scorer !== \"function\") {\n      callback(new Error(\"Invalid Scorer\"));\n      return;\n    }\n\n    if (!options.scorer) {\n      options.scorer = QRatio;\n    }\n\n    var isCustom = isCustomFunc(options.scorer); // check if func name is one of fuzzball's, so don't use same names..\n\n    if (!options.cutoff || typeof options.cutoff !== \"number\") {\n      options.cutoff = -1;\n    }\n\n    var pre_processor = function (choice, force_ascii) {\n      return choice;\n    };\n\n    if (options.full_process) {\n      pre_processor = full_process;\n      if (!isCustom) options.processed = true; // to let wildcardLeven know and not run again after we set fp to false below\n    }\n\n    var normalize = false;\n\n    if (!isCustom) {\n      // if custom scorer func let scorer handle it\n      query = pre_processor(query, options);\n      options.full_process = false;\n\n      if (options.astral && options.normalize) {\n        options.normalize = false; // don't normalize again in ratio if doing here\n\n        if (String.prototype.normalize) {\n          normalize = true;\n          query = query.normalize();\n        } else {\n          if (typeof console !== undefined) console.warn(\"Normalization not supported in your environment\");\n        }\n      }\n\n      if (query.length === 0) if (typeof console !== undefined) console.warn(\"Processed query is empty string\");\n    }\n\n    var results = [];\n    var anyblank = false;\n    var tsort = false;\n    var tset = false;\n\n    if (options.scorer.name === \"token_sort_ratio\" || options.scorer.name === \"partial_token_sort_ratio\") {\n      var proc_sorted_query = process_and_sort(query);\n      tsort = true;\n    } else if (options.scorer.name === \"token_set_ratio\" || options.scorer.name === \"partial_token_set_ratio\") {\n      var query_tokens = tokenize(query, options);\n      tset = true;\n    }\n\n    var idx, mychoice, result, cmpHeap, cmpSort;\n\n    if (options.returnObjects) {\n      cmpHeap = function (a, b) {\n        return a.score - b.score;\n      };\n\n      cmpSort = function (a, b) {\n        return b.score - a.score;\n      };\n    } else {\n      cmpHeap = function (a, b) {\n        return a[1] - b[1];\n      };\n\n      cmpSort = function (a, b) {\n        return b[1] - a[1];\n      };\n    }\n\n    var keys = Object.keys(choices);\n    isArray ? searchLoop(0) : searchLoop(keys[0], 0);\n\n    function searchLoop(c, i) {\n      if (isArray || choices.hasOwnProperty(c)) {\n        options.tokens = undefined;\n        options.proc_sorted = false;\n\n        if (tsort) {\n          options.proc_sorted = true;\n          if (choices[c] && choices[c].proc_sorted) mychoice = choices[c].proc_sorted;else {\n            mychoice = pre_processor(options.processor(choices[c]), options);\n            mychoice = process_and_sort(normalize ? mychoice.normalize() : mychoice);\n          }\n          result = options.scorer(proc_sorted_query, mychoice, options);\n        } else if (tset) {\n          mychoice = \"x\"; //dummy string so it validates\n\n          if (choices[c] && choices[c].tokens) {\n            options.tokens = [query_tokens, choices[c].tokens];\n            if (options.trySimple) mychoice = pre_processor(options.processor(choices[c]), options);\n          } else {\n            mychoice = pre_processor(options.processor(choices[c]), options);\n            options.tokens = [query_tokens, tokenize(normalize ? mychoice.normalize() : mychoice, options)];\n          } //query and mychoice only used for validation here unless trySimple = true\n\n\n          result = options.scorer(query, mychoice, options);\n        } else if (isCustom) {\n          // options.full_process should be unmodified, don't pre-process here since mychoice maybe not string\n          mychoice = options.processor(choices[c]);\n          result = options.scorer(query, mychoice, options);\n        } else {\n          mychoice = pre_processor(options.processor(choices[c]), options);\n          if (typeof mychoice !== \"string\" || mychoice.length === 0) anyblank = true;\n          if (normalize && typeof mychoice === \"string\") mychoice = mychoice.normalize();\n          result = options.scorer(query, mychoice, options);\n        }\n\n        if (isArray) idx = parseInt(c);else idx = c;\n\n        if (result > options.cutoff) {\n          if (options.returnObjects) results.push({\n            choice: choices[c],\n            score: result,\n            key: idx\n          });else results.push([choices[c], result, idx]);\n        }\n      }\n\n      if (abortController && abortController.signal.aborted === true) {\n        callback(new Error(\"aborted\"));\n        return;\n      }\n\n      if (cancelToken && cancelToken.canceled === true) {\n        callback(new Error(\"canceled\"));\n        return;\n      }\n\n      if (isArray && c < choices.length - 1) {\n        if (c % loopOffset === 0) {\n          setImmediate(function () {\n            searchLoop(c + 1);\n          });\n        } else {\n          searchLoop(c + 1);\n        }\n      } else if (i < keys.length - 1) {\n        if (i % loopOffset === 0) {\n          setImmediate(function () {\n            searchLoop(keys[i + 1], i + 1);\n          });\n        } else {\n          searchLoop(keys[i + 1], i + 1);\n        }\n      } else {\n        if (anyblank) if (typeof console !== undefined) console.log(\"One or more choices were empty. (post-processing if applied)\");\n\n        if (options.limit && typeof options.limit === \"number\" && options.limit > 0 && options.limit < numchoices && !options.unsorted) {\n          results = Heap.nlargest(results, options.limit, cmpHeap);\n        } else if (!options.unsorted) {\n          results = results.sort(cmpSort);\n        }\n\n        callback(null, results);\n      }\n    }\n  }\n  /** Main Scoring Code */\n\n\n  function _cosineSim(v1, v2, options) {\n    var keysV1 = Object.keys(v1);\n    var keysV2 = Object.keys(v2);\n\n    var intersection = _intersect(keysV1, keysV2);\n\n    var prods = intersection.map(function (x) {\n      return v1[x] * v2[x];\n    });\n    var numerator = prods.reduce(function (acc, x) {\n      return acc + x;\n    }, 0);\n    var v1Prods = keysV1.map(function (x) {\n      return Math.pow(v1[x], 2);\n    });\n    var v1sum = v1Prods.reduce(function (acc, x) {\n      return acc + x;\n    }, 0);\n    var v2Prods = keysV2.map(function (x) {\n      return Math.pow(v2[x], 2);\n    });\n    var v2sum = v2Prods.reduce(function (acc, x) {\n      return acc + x;\n    }, 0);\n    var denominator = Math.sqrt(v1sum) * Math.sqrt(v2sum);\n    return numerator / denominator;\n  }\n\n  var WILDCARD_KEY = \"%*SuperUniqueWildcardKey*%\";\n  var normalWarnCharCounts = false;\n\n  function _getCharacterCounts(str, options) {\n    var normalString = str;\n\n    if (options.astral) {\n      if (options.normalize) {\n        if (String.prototype.normalize) {\n          normalString = str.normalize();\n        } else {\n          if (!normalWarnCharCounts) {\n            if (typeof console !== undefined) console.warn(\"Normalization not supported in your environment\");\n            normalWarnCharCounts = true;\n          }\n        }\n      }\n\n      var charArray = _toArray(normalString);\n    } else {\n      var charArray = normalString.split(\"\");\n    }\n\n    var charCounts = {};\n\n    if (options.wildcards) {\n      for (var i = 0; i < charArray.length; i++) {\n        var char = charArray[i];\n\n        if (options.wildcards.indexOf(char) > -1) {\n          if (charCounts[WILDCARD_KEY]) {\n            charCounts[WILDCARD_KEY] += 1;\n          } else {\n            charCounts[WILDCARD_KEY] = 1;\n          }\n        } else if (charCounts[char]) {\n          charCounts[char] += 1;\n        } else {\n          charCounts[char] = 1;\n        }\n      }\n    } else {\n      for (var i = 0; i < charArray.length; i++) {\n        var char = charArray[i];\n\n        if (charCounts[char]) {\n          charCounts[char] += 1;\n        } else {\n          charCounts[char] = 1;\n        }\n      }\n    }\n\n    return charCounts;\n  } // Sort sorted2 according to similarity to sorted1\n\n\n  function _token_similarity_sort(sorted1, sorted2, options) {\n    var oldSorted2 = sorted2;\n    var charCounts1 = sorted1.reduce(function (acc, str) {\n      acc[str] = _getCharacterCounts(str, options);\n      return acc;\n    }, {});\n    var charCounts2 = oldSorted2.reduce(function (acc, str) {\n      acc[str] = _getCharacterCounts(str, options);\n      return acc;\n    }, {});\n    var newSorted2 = [];\n    var i = 0;\n\n    while (oldSorted2.length && i < sorted1.length) {\n      // most similar to first token in s1, 2nd token, ... n tokens\n      // sort by similarity to sorted1[i], take most similar\n      var sim = _orderBy(oldSorted2, function (x) {\n        return _cosineSim(charCounts1[sorted1[i]], charCounts2[x]);\n      }, 'desc')[0];\n\n      newSorted2.push(sim);\n      i++;\n      oldSorted2 = oldSorted2.filter(function (token) {\n        return token !== sim;\n      });\n    } // if oldSorted2 is longer, append it to the end\n\n\n    return newSorted2.concat(oldSorted2);\n  }\n\n  function _order_token_lists(str1, tokens1, str2, tokens2) {\n    // To keep consistent ordering, assume shortest number of tokens, then str.length,\n    // is more significant, else fallback to sort alphabetacally\n    var first = tokens1;\n    var second = tokens2;\n\n    if (tokens1.length > tokens2.length) {\n      first = tokens2;\n      second = tokens1;\n    } else if (tokens1.length === tokens2.length) {\n      if (str1.length > str2.length) {\n        first = tokens2;\n        second = tokens1;\n      } else {\n        var sortedStrings = [str1, str2].sort();\n\n        if (sortedStrings[0] === str2) {\n          first = tokens2;\n          second = tokens1;\n        }\n      }\n    }\n\n    return [first, second];\n  }\n\n  function _token_similarity_sort_ratio(str1, str2, options) {\n    if (!options.tokens) {\n      var tokens1 = tokenize(str1, options);\n      var tokens2 = tokenize(str2, options);\n    } else {\n      var tokens1 = options.tokens[0];\n      var tokens2 = options.tokens[1];\n    }\n\n    var sorted1 = tokens1.sort();\n    var sorted2 = tokens2.sort();\n\n    var orderedTokenLists = _order_token_lists(str1, sorted1, str2, sorted2);\n\n    var first = orderedTokenLists[0];\n    var second = orderedTokenLists[1];\n\n    const newSecond = _token_similarity_sort(first, second, options);\n\n    if (!options.partial) {\n      return _ratio(first.join(\" \"), newSecond.join(\" \"), options);\n    } else {\n      return _partial_ratio(first.join(\" \"), newSecond.join(\" \"), options);\n    }\n  }\n\n  function _token_set(str1, str2, options) {\n    if (!options.tokens) {\n      var tokens1 = tokenize(str1, options);\n      var tokens2 = tokenize(str2, options);\n    } else {\n      var tokens1 = options.tokens[0];\n      var tokens2 = options.tokens[1];\n    }\n\n    if (options.wildcards) {\n      var partWild = _partialRight(wildleven, options, leven);\n\n      var wildCompare = function (a, b) {\n        return partWild(a, b) === 0;\n      };\n\n      var intersection = _intersectWith(tokens1, tokens2, wildCompare);\n\n      var diff1to2 = _differenceWith(tokens1, tokens2, wildCompare);\n\n      var diff2to1 = _differenceWith(tokens2, tokens1, wildCompare);\n    } else {\n      var intersection = _intersect(tokens1, tokens2);\n\n      var diff1to2 = _difference(tokens1, tokens2);\n\n      var diff2to1 = _difference(tokens2, tokens1);\n    }\n\n    var sorted_sect = intersection.sort().join(\" \");\n    var sorted_1to2List = diff1to2.sort();\n    var sorted_2to1List = diff2to1.sort();\n\n    if (options.sortBySimilarity) {\n      var orderedTokenLists = _order_token_lists(str1, sorted_1to2List, str2, sorted_2to1List);\n\n      var first = orderedTokenLists[0];\n      var second = orderedTokenLists[1];\n      var sorted_1to2 = first.join(\" \");\n\n      var sorted_2to1 = _token_similarity_sort(first, second, options).join(\" \");\n    } else {\n      var sorted_1to2 = sorted_1to2List.join(\" \");\n      var sorted_2to1 = sorted_2to1List.join(\" \");\n    }\n\n    var combined_1to2 = sorted_sect + \" \" + sorted_1to2;\n    var combined_2to1 = sorted_sect + \" \" + sorted_2to1;\n    sorted_sect = sorted_sect.trim();\n    combined_1to2 = combined_1to2.trim();\n    combined_2to1 = combined_2to1.trim();\n    var ratio_func = _ratio;\n\n    if (options.partial) {\n      ratio_func = _partial_ratio;\n      if (sorted_sect.length > 0) return 100; // will always be 100 anyway\n    }\n\n    var pairwise = [ratio_func(sorted_sect, combined_1to2, options), ratio_func(sorted_sect, combined_2to1, options), ratio_func(combined_1to2, combined_2to1, options)];\n\n    if (options.trySimple) {\n      pairwise.push(ratio_func(str1, str2, options));\n    }\n\n    return Math.max.apply(null, pairwise);\n  }\n\n  var normalWarn = false;\n\n  function _ratio(str1, str2, options) {\n    if (!validate(str1)) return 0;\n    if (!validate(str2)) return 0;\n\n    if (options.ratio_alg && options.ratio_alg === \"difflib\") {\n      var m = new SequenceMatcher(null, str1, str2);\n      var r = m.ratio();\n      return Math.round(100 * r);\n    } //to match behavior of python-Levenshtein/fuzzywuzzy, substitution cost is 2 if not specified, or would default to 1\n\n\n    if (typeof options.subcost === \"undefined\") options.subcost = 2;\n    var levdistance, lensum;\n\n    if (options.astral) {\n      if (options.normalize) {\n        if (String.prototype.normalize) {\n          str1 = str1.normalize();\n          str2 = str2.normalize();\n        } else {\n          if (!normalWarn) {\n            if (typeof console !== undefined) console.warn(\"Normalization not supported in your environment\");\n            normalWarn = true;\n          }\n        }\n      }\n\n      levdistance = iLeven(str1, str2, options, _toArray);\n      lensum = _toArray(str1).length + _toArray(str2).length;\n    } else {\n      if (!options.wildcards) {\n        levdistance = leven(str1, str2, options);\n        lensum = str1.length + str2.length;\n      } else {\n        levdistance = wildleven(str1, str2, options, leven); // falls back to leven if invalid\n\n        lensum = str1.length + str2.length;\n      }\n    }\n\n    return Math.round(100 * ((lensum - levdistance) / lensum));\n  }\n\n  function _partial_ratio(str1, str2, options) {\n    if (!validate(str1)) return 0;\n    if (!validate(str2)) return 0;\n\n    if (str1.length <= str2.length) {\n      var shorter = str1;\n      var longer = str2;\n    } else {\n      var shorter = str2;\n      var longer = str1;\n    }\n\n    var m = new SequenceMatcher(null, shorter, longer);\n    var blocks = m.getMatchingBlocks();\n    var scores = [];\n\n    for (var b = 0; b < blocks.length; b++) {\n      var long_start = blocks[b][1] - blocks[b][0] > 0 ? blocks[b][1] - blocks[b][0] : 0;\n      var long_end = long_start + shorter.length;\n      var long_substr = longer.substring(long_start, long_end);\n\n      var r = _ratio(shorter, long_substr, options);\n\n      if (r > 99.5) return 100;else scores.push(r);\n    }\n\n    return Math.max.apply(null, scores);\n  } //polyfill for Object.keys\n  // From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\n\n\n  if (!Object.keys) {\n    Object.keys = function () {\n      'use strict';\n\n      var hasOwnProperty = Object.prototype.hasOwnProperty,\n          hasDontEnumBug = !{\n        toString: null\n      }.propertyIsEnumerable('toString'),\n          dontEnums = ['toString', 'toLocaleString', 'valueOf', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'constructor'],\n          dontEnumsLength = dontEnums.length;\n      return function (obj) {\n        if (typeof obj !== 'object' && (typeof obj !== 'function' || obj === null)) {\n          throw new TypeError('Object.keys called on non-object');\n        }\n\n        var result = [],\n            prop,\n            i;\n\n        for (prop in obj) {\n          if (hasOwnProperty.call(obj, prop)) {\n            result.push(prop);\n          }\n        }\n\n        if (hasDontEnumBug) {\n          for (i = 0; i < dontEnumsLength; i++) {\n            if (hasOwnProperty.call(obj, dontEnums[i])) {\n              result.push(dontEnums[i]);\n            }\n          }\n        }\n\n        return result;\n      };\n    }();\n  }\n\n  var extractAsPromised = undefined;\n\n  if (typeof Promise !== 'undefined') {\n    extractAsPromised = function (query, choices, options) {\n      return new Promise(function (resolve, reject) {\n        extractAsync(query, choices, options, function (err, response) {\n          if (err) reject(err);else resolve(response);\n        });\n      });\n    };\n  }\n\n  var fuzzball = {\n    distance: distance,\n    ratio: QRatio,\n    partial_ratio: partial_ratio,\n    token_set_ratio: token_set_ratio,\n    token_sort_ratio: token_sort_ratio,\n    partial_token_set_ratio: partial_token_set_ratio,\n    partial_token_sort_ratio: partial_token_sort_ratio,\n    token_similarity_sort_ratio: token_similarity_sort_ratio,\n    partial_token_similarity_sort_ratio: partial_token_similarity_sort_ratio,\n    WRatio: WRatio,\n    full_process: full_process,\n    extract: extract,\n    extractAsync: extractAsync,\n    extractAsPromised: extractAsPromised,\n    process_and_sort: process_and_sort,\n    unique_tokens: tokenize,\n    dedupe: dedupe\n  };\n  module.exports = fuzzball;\n})();","map":{"version":3,"sources":["/Users/armanrafati/Documents/Cleanify/client/node_modules/fuzzball/fuzzball.js"],"names":["SequenceMatcher","require","Heap","_intersect","intersection","_intersectWith","intersectionWith","_difference","difference","_differenceWith","differenceWith","_uniq","uniq","_uniqWith","uniqWith","_partialRight","partialRight","_forEach","forEach","_keys","keys","_isArray","isArray","_toArray","toArray","_orderBy","orderBy","orderByDesc","arr","cmp","mapped","map","str","key","value","sort","a","b","item","iLeven","wildleven","leven","setImmediate","utils","validate","process_and_sort","tokenize","full_process","clone_and_set_option_defaults","isCustomFunc","processing","QRatio","extract","dedupe","distance","str1","str2","options_p","options","subcost","astral","_ratio","partial_ratio","_partial_ratio","token_set_ratio","_token_set","partial_token_set_ratio","partial","token_sort_ratio","proc_sorted","partial_token_sort_ratio","token_similarity_sort_ratio","_token_similarity_sort_ratio","partial_token_similarity_sort_ratio","WRatio","try_partial","unbase_scale","partial_scale","base","len_ratio","Math","max","length","min","ptsor","ptser","round","tsor","tser","query","choices","numchoices","Object","Error","console","undefined","warn","processor","x","scorer","isCustom","cutoff","pre_processor","choice","force_ascii","processed","normalize","String","prototype","results","anyblank","tsort","tset","name","proc_sorted_query","query_tokens","result","mychoice","cmpHeap","cmpSort","returnObjects","score","tokens","trySimple","push","log","limit","unsorted","nlargest","extractAsync","callback","abortController","cancelToken","loopOffset","asyncLoopOffset","idx","searchLoop","c","i","hasOwnProperty","parseInt","signal","aborted","canceled","_cosineSim","v1","v2","keysV1","keysV2","prods","numerator","reduce","acc","v1Prods","pow","v1sum","v2Prods","v2sum","denominator","sqrt","WILDCARD_KEY","normalWarnCharCounts","_getCharacterCounts","normalString","charArray","split","charCounts","wildcards","char","indexOf","_token_similarity_sort","sorted1","sorted2","oldSorted2","charCounts1","charCounts2","newSorted2","sim","filter","token","concat","_order_token_lists","tokens1","tokens2","first","second","sortedStrings","orderedTokenLists","newSecond","join","partWild","wildCompare","diff1to2","diff2to1","sorted_sect","sorted_1to2List","sorted_2to1List","sortBySimilarity","sorted_1to2","sorted_2to1","combined_1to2","combined_2to1","trim","ratio_func","pairwise","apply","normalWarn","ratio_alg","m","r","ratio","levdistance","lensum","shorter","longer","blocks","getMatchingBlocks","scores","long_start","long_end","long_substr","substring","hasDontEnumBug","toString","propertyIsEnumerable","dontEnums","dontEnumsLength","obj","TypeError","prop","call","extractAsPromised","Promise","resolve","reject","err","response","fuzzball","unique_tokens","module","exports"],"mappings":"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","sourcesContent":["(function () {\n    /** @module fuzzball */\n    'use strict';\n    var SequenceMatcher = require('./lib/fbdifflib.js');\n    var Heap = require('heap');\n\n    var _intersect = require('./lib/lodash.custom.min.js').intersection;\n    var _intersectWith = require('./lib/lodash.custom.min.js').intersectionWith;\n    var _difference = require('./lib/lodash.custom.min.js').difference;\n    var _differenceWith = require('./lib/lodash.custom.min.js').differenceWith;\n    var _uniq = require('./lib/lodash.custom.min.js').uniq;\n    var _uniqWith = require('./lib/lodash.custom.min.js').uniqWith;\n    var _partialRight = require('./lib/lodash.custom.min.js').partialRight;\n    var _forEach = require('./lib/lodash.custom.min.js').forEach;\n    var _keys = require('./lib/lodash.custom.min.js').keys;\n    var _isArray = require('./lib/lodash.custom.min.js').isArray;\n    var _toArray = require('./lib/lodash.custom.min.js').toArray;\n    var _orderBy = require('./lib/lodash.custom.min.js').orderBy;\n\n    function orderByDesc (arr, cmp) {\n        var mapped = arr.map(function (str) {\n            return { key: str, value: cmp(str) };\n        });\n\n        mapped.sort(function (a, b) {\n            return b.value - a.value;\n        });\n\n        return mapped.map(function (item) {\n            return item.key;\n        });\n    }\n\n    var iLeven = require('./lib/iLeven.js');\n    var wildleven = require('./lib/wildcardLeven.js');\n    var leven = require('./lib/leven.js');\n\n    if (typeof setImmediate !== 'function') { require('setimmediate'); } // didn't run in tiny-worker without extra check\n\n    var utils = require('./lib/utils.js')(_uniq, _uniqWith, _partialRight);\n    var validate = utils.validate;\n    var process_and_sort = utils.process_and_sort;\n    var tokenize = utils.tokenize;\n    var full_process = utils.full_process;\n    var clone_and_set_option_defaults = utils.clone_and_set_option_defaults;\n    var isCustomFunc = utils.isCustomFunc;\n\n    var processing = require('./lib/process.js')(clone_and_set_option_defaults, _isArray, QRatio, extract);\n\n    var dedupe = processing.dedupe;\n\n    /** Mostly follows after python fuzzywuzzy, https://github.com/seatgeek/fuzzywuzzy */\n\n\n    /** Public functions */\n\n    function distance(str1, str2, options_p) {\n        /**\n         * Calculate levenshtein distance of the two strings.\n         *\n         * @function distance\n         * @param {string} str1 - the first string.\n         * @param {string} str2 - the second string.\n         * @param {Object} [options_p] - Additional options.\n         * @param {boolean} [options_p.useCollator] - Use `Intl.Collator` for locale-sensitive string comparison.\n         * @param {boolean} [options_p.full_process] - Apply basic cleanup, non-alphanumeric to whitespace etc. if true. default true\n         * @param {boolean} [options_p.force_ascii] - Strip non-ascii in full_process if true (non-ascii will not become whtespace), only applied if full_process is true as well, default true\n         * @param {boolean} [options_p.collapseWhitespace] - Collapse consecutive white space during full_process, default true\n         * @param {string} [options_p.wildcards] - characters that will be used as wildcards if provided\n         * @param {number} [options_p.astral] - Use astral aware calculation\n         * @param {string} [options_p.normalize] - Normalize unicode representations\n         * @returns {number} - the levenshtein distance (0 and above).\n         */\n        var options = clone_and_set_option_defaults(options_p);\n        str1 = options.full_process ? full_process(str1, options) : str1;\n        str2 = options.full_process ? full_process(str2, options) : str2;\n        if (typeof options.subcost === \"undefined\") options.subcost = 1;\n        if (options.astral) return iLeven(str1, str2, options, _toArray);\n        else return wildleven(str1, str2, options, leven); // falls back to leven if no wildcards\n    }\n\n    function QRatio(str1, str2, options_p) {\n        /**\n         * Calculate levenshtein ratio of the two strings.\n         *\n         * @function ratio\n         * @param {string} str1 - the first string.\n         * @param {string} str2 - the second string.\n         * @param {Object} [options_p] - Additional options.\n         * @param {boolean} [options_p.useCollator] - Use `Intl.Collator` for locale-sensitive string comparison.\n         * @param {boolean} [options_p.full_process] - Apply basic cleanup, non-alphanumeric to whitespace etc. if true. default true\n         * @param {boolean} [options_p.force_ascii] - Strip non-ascii in full_process if true (non-ascii will not become whtespace), only applied if full_process is true as well, default true\n         * @param {boolean} [options_p.collapseWhitespace] - Collapse consecutive white space during full_process, default true\n         * @param {string} [options_p.wildcards] - characters that will be used as wildcards if provided\n         * @param {number} [options_p.astral] - Use astral aware calculation\n         * @param {string} [options_p.normalize] - Normalize unicode representations\n         * @returns {number} - the levenshtein ratio (0-100).\n         */\n        var options = clone_and_set_option_defaults(options_p);\n        str1 = options.full_process ? full_process(str1, options) : str1;\n        str2 = options.full_process ? full_process(str2, options) : str2;\n        if (!validate(str1)) return 0;\n        if (!validate(str2)) return 0;\n        return _ratio(str1, str2, options);\n    }\n\n    function partial_ratio(str1, str2, options_p) {\n        /**\n         * Calculate partial levenshtein ratio of the two strings.\n         *\n         * @function partial_ratio\n         * @param {string} str1 - the first string.\n         * @param {string} str2 - the second string.\n         * @param {Object} [options_p] - Additional options.\n         * @param {boolean} [options_p.useCollator] - Use `Intl.Collator` for locale-sensitive string comparison.\n         * @param {boolean} [options_p.full_process] - Apply basic cleanup, non-alphanumeric to whitespace etc. if true. default true\n         * @param {boolean} [options_p.force_ascii] - Strip non-ascii in full_process if true (non-ascii will not become whtespace), only applied if full_process is true as well, default true\n         * @param {boolean} [options_p.collapseWhitespace] - Collapse consecutive white space during full_process, default true\n         * @param {string} [options_p.wildcards] - characters that will be used as wildcards if provided\n         * @param {number} [options_p.astral] - Use astral aware calculation\n         * @param {string} [options_p.normalize] - Normalize unicode representations\n         * @returns {number} - the levenshtein ratio (0-100).\n         */\n        var options = clone_and_set_option_defaults(options_p);\n        str1 = options.full_process ? full_process(str1, options) : str1;\n        str2 = options.full_process ? full_process(str2, options) : str2;\n        if (!validate(str1)) return 0;\n        if (!validate(str2)) return 0;\n        return _partial_ratio(str1, str2, options);\n    }\n\n    function token_set_ratio(str1, str2, options_p) {\n        /**\n         * Calculate token set ratio of the two strings.\n         *\n         * @function token_set_ratio\n         * @param {string} str1 - the first string.\n         * @param {string} str2 - the second string.\n         * @param {Object} [options_p] - Additional options.\n         * @param {boolean} [options_p.useCollator] - Use `Intl.Collator` for locale-sensitive string comparison.\n         * @param {boolean} [options_p.full_process] - Apply basic cleanup, non-alphanumeric to whitespace etc. if true. default true\n         * @param {boolean} [options_p.force_ascii] - Strip non-ascii in full_process if true (non-ascii will not become whtespace), only applied if full_process is true as well, default true\n         * @param {boolean} [options_p.trySimple] - try simple/partial ratio as part of (parial_)token_set_ratio test suite\n         * @param {boolean} [options_p.sortBySimilarity] - sort tokens by similarity to each other before combining instead of alphabetically\n         * @param {string} [options_p.wildcards] - characters that will be used as wildcards if provided\n         * @param {number} [options_p.astral] - Use astral aware calculation\n         * @param {string} [options_p.normalize] - Normalize unicode representations\n         * @returns {number} - the levenshtein ratio (0-100).\n         */\n        var options = clone_and_set_option_defaults(options_p);\n        str1 = options.full_process ? full_process(str1, options) : str1;\n        str2 = options.full_process ? full_process(str2, options) : str2;\n        if (!validate(str1)) return 0;\n        if (!validate(str2)) return 0;\n        return _token_set(str1, str2, options);\n    }\n\n    function partial_token_set_ratio(str1, str2, options_p) {\n        /**\n         * Calculate partial token ratio of the two strings.\n         *\n         * @function partial_token_set_ratio\n         * @param {string} str1 - the first string.\n         * @param {string} str2 - the second string.\n         * @param {Object} [options_p] - Additional options.\n         * @param {boolean} [options_p.useCollator] - Use `Intl.Collator` for locale-sensitive string comparison.\n         * @param {boolean} [options_p.full_process] - Apply basic cleanup, non-alphanumeric to whitespace etc. if true. default true\n         * @param {boolean} [options_p.force_ascii] - Strip non-ascii in full_process if true (non-ascii will not become whtespace), only applied if full_process is true as well, default true\n         * @param {boolean} [options_p.trySimple] - try simple/partial ratio as part of (parial_)token_set_ratio test suite\n         * @param {boolean} [options_p.sortBySimilarity] - sort tokens by similarity to each other before combining instead of alphabetically\n         * @param {string} [options_p.wildcards] - characters that will be used as wildcards if provided\n         * @param {number} [options_p.astral] - Use astral aware calculation\n         * @param {string} [options_p.normalize] - Normalize unicode representations\n         * @returns {number} - the levenshtein ratio (0-100).\n         */\n        var options = clone_and_set_option_defaults(options_p);\n        str1 = options.full_process ? full_process(str1, options) : str1;\n        str2 = options.full_process ? full_process(str2, options) : str2;\n        if (!validate(str1)) return 0;\n        if (!validate(str2)) return 0;\n        options.partial = true;\n        return _token_set(str1, str2, options);\n    }\n\n    function token_sort_ratio(str1, str2, options_p) {\n        /**\n         * Calculate token sort ratio of the two strings.\n         *\n         * @function token_sort_ratio\n         * @param {string} str1 - the first string.\n         * @param {string} str2 - the second string.\n         * @param {Object} [options_p] - Additional options.\n         * @param {boolean} [options_p.useCollator] - Use `Intl.Collator` for locale-sensitive string comparison.\n         * @param {boolean} [options_p.full_process] - Apply basic cleanup, non-alphanumeric to whitespace etc. if true. default true\n         * @param {boolean} [options_p.force_ascii] - Strip non-ascii in full_process if true (non-ascii will not become whtespace), only applied if full_process is true as well, default true\n         * @param {string} [options_p.wildcards] - characters that will be used as wildcards if provided\n         * @param {number} [options_p.astral] - Use astral aware calculation\n         * @param {string} [options_p.normalize] - Normalize unicode representations\n         * @returns {number} - the levenshtein ratio (0-100).\n         */\n        var options = clone_and_set_option_defaults(options_p);\n        str1 = options.full_process ? full_process(str1, options) : str1;\n        str2 = options.full_process ? full_process(str2, options) : str2;\n        if (!validate(str1)) return 0;\n        if (!validate(str2)) return 0;\n        if (!options.proc_sorted) {\n            str1 = process_and_sort(str1);\n            str2 = process_and_sort(str2);\n        }\n        return _ratio(str1, str2, options);\n    }\n\n    function partial_token_sort_ratio(str1, str2, options_p) {\n        /**\n         * Calculate partial token sort ratio of the two strings.\n         *\n         * @function partial_token_sort_ratio\n         * @param {string} str1 - the first string.\n         * @param {string} str2 - the second string.\n         * @param {Object} [options_p] - Additional options.\n         * @param {boolean} [options_p.useCollator] - Use `Intl.Collator` for locale-sensitive string comparison.\n         * @param {boolean} [options_p.full_process] - Apply basic cleanup, non-alphanumeric to whitespace etc. if true. default true\n         * @param {boolean} [options_p.force_ascii] - Strip non-ascii in full_process if true (non-ascii will not become whtespace), only applied if full_process is true as well, default true\n         * @param {string} [options_p.wildcards] - characters that will be used as wildcards if provided\n         * @param {number} [options_p.astral] - Use astral aware calculation\n         * @param {string} [options_p.normalize] - Normalize unicode representations\n         * @returns {number} - the levenshtein ratio (0-100).\n         */\n        var options = clone_and_set_option_defaults(options_p);\n        str1 = options.full_process ? full_process(str1, options) : str1;\n        str2 = options.full_process ? full_process(str2, options) : str2;\n        if (!validate(str1)) return 0;\n        if (!validate(str2)) return 0;\n        options.partial = true;\n        if (!options.proc_sorted) {\n            str1 = process_and_sort(str1);\n            str2 = process_and_sort(str2);\n        }\n        return _partial_ratio(str1, str2, options);\n    }\n\n    function token_similarity_sort_ratio(str1, str2, options_p) {\n        /**\n         * Calculate token sort ratio of the two strings.\n         *\n         * @function token_similarity_sort_ratio\n         * @param {string} str1 - the first string.\n         * @param {string} str2 - the second string.\n         * @param {Object} [options_p] - Additional options.\n         * @param {boolean} [options_p.useCollator] - Use `Intl.Collator` for locale-sensitive string comparison.\n         * @param {boolean} [options_p.full_process] - Apply basic cleanup, non-alphanumeric to whitespace etc. if true. default true\n         * @param {boolean} [options_p.force_ascii] - Strip non-ascii in full_process if true (non-ascii will not become whtespace), only applied if full_process is true as well, default true\n         * @param {string} [options_p.wildcards] - characters that will be used as wildcards if provided\n         * @param {number} [options_p.astral] - Use astral aware calculation\n         * @param {string} [options_p.normalize] - Normalize unicode representations\n         * @returns {number} - the levenshtein ratio (0-100).\n         */\n        var options = clone_and_set_option_defaults(options_p);\n        str1 = options.full_process ? full_process(str1, options) : str1;\n        str2 = options.full_process ? full_process(str2, options) : str2;\n        if (!validate(str1)) return 0;\n        if (!validate(str2)) return 0;\n        /* if (!options.proc_sorted) {\n            str1 = process_and_sort(str1);\n            str2 = process_and_sort(str2);\n        } */\n        return _token_similarity_sort_ratio(str1, str2, options);\n    }\n\n    function partial_token_similarity_sort_ratio(str1, str2, options_p) {\n        /**\n         * Calculate token sort ratio of the two strings.\n         *\n         * @function partial_token_similarity_sort_ratio\n         * @param {string} str1 - the first string.\n         * @param {string} str2 - the second string.\n         * @param {Object} [options_p] - Additional options.\n         * @param {boolean} [options_p.useCollator] - Use `Intl.Collator` for locale-sensitive string comparison.\n         * @param {boolean} [options_p.full_process] - Apply basic cleanup, non-alphanumeric to whitespace etc. if true. default true\n         * @param {boolean} [options_p.force_ascii] - Strip non-ascii in full_process if true (non-ascii will not become whtespace), only applied if full_process is true as well, default true\n         * @param {string} [options_p.wildcards] - characters that will be used as wildcards if provided\n         * @param {number} [options_p.astral] - Use astral aware calculation\n         * @param {string} [options_p.normalize] - Normalize unicode representations\n         * @returns {number} - the levenshtein ratio (0-100).\n         */\n        var options = clone_and_set_option_defaults(options_p);\n        str1 = options.full_process ? full_process(str1, options) : str1;\n        str2 = options.full_process ? full_process(str2, options) : str2;\n        if (!validate(str1)) return 0;\n        if (!validate(str2)) return 0;\n        /* if (!options.proc_sorted) {\n            str1 = process_and_sort(str1);\n            str2 = process_and_sort(str2);\n        } */\n        options.partial = true;\n        return _token_similarity_sort_ratio(str1, str2, options);\n    }\n\n    function WRatio(str1, str2, options_p) {\n        /**\n         * Calculate weighted ratio of the two strings, taking best score of various methods.\n         *\n         * @function WRatio\n         * @param {string} str1 - the first string.\n         * @param {string} str2 - the second string.\n         * @param {Object} [options_p] - Additional options.\n         * @param {boolean} [options_p.useCollator] - Use `Intl.Collator` for locale-sensitive string comparison.\n         * @param {boolean} [options_p.full_process] - Apply basic cleanup, non-alphanumeric to whitespace etc. if true. default true\n         * @param {boolean} [options_p.force_ascii] - Strip non-ascii in full_process if true (non-ascii will not become whtespace), only applied if full_process is true as well, default true\n         * @param {boolean} [options_p.collapseWhitespace] - Collapse consecutive white space during full_process, default true\n         * @param {string} [options_p.wildcards] - characters that will be used as wildcards if provided\n         * @param {number} [options_p.astral] - Use astral aware calculation\n         * @param {string} [options_p.normalize] - Normalize unicode representations\n         * @returns {number} - the levenshtein ratio (0-100).\n         */\n        var options = clone_and_set_option_defaults(options_p);\n        //str1 = full_process(str1, options);  //fuzzywuzzy runs no matter what, reason? going by options.full_process\n        //str2 = full_process(str2, options);\n        str1 = options.full_process ? full_process(str1, options) : str1;\n        str2 = options.full_process ? full_process(str2, options) : str2;\n        options.full_process = false;\n        if (!validate(str1)) return 0;\n        if (!validate(str2)) return 0;\n\n        var try_partial = true;\n        var unbase_scale = .95;\n        var partial_scale = .90;\n\n        var base = _ratio(str1, str2, options);\n        var len_ratio = Math.max(str1.length, str2.length)/Math.min(str1.length, str2.length);\n\n        if (len_ratio < 1.5) try_partial = false;\n        if (len_ratio > 8) partial_scale = .6;\n\n        if (try_partial) {\n            var partial = _partial_ratio(str1, str2, options) * partial_scale;\n            var ptsor = partial_token_sort_ratio(str1, str2, options) * unbase_scale * partial_scale;\n            var ptser = partial_token_set_ratio(str1, str2, options) * unbase_scale * partial_scale;\n            return Math.round(Math.max(base, partial, ptsor, ptser));\n        }\n        else {\n            var tsor = token_sort_ratio(str1, str2, options) * unbase_scale;\n            var tser = token_set_ratio(str1, str2, options) * unbase_scale;\n            return Math.round(Math.max(base, tsor, tser));\n        }\n    }\n\n    function extract(query, choices, options_p) {\n        /**\n         * Return the top scoring items from an array (or assoc array) of choices\n         *\n         * @function extract\n         * @param query - the search term.\n         * @param {String[]|Object[]|Object} choices - array of strings, or array of choice objects if processor is supplied, or object of form {key: choice}\n         * @param {Object} [options_p] - Additional options.\n         * @param {function} [options_p.scorer] - takes two values and returns a score, will be passed options as 3rd argument\n         * @param {function} [options_p.processor] - takes each choice and outputs a value to be used for Scoring\n         * @param {number} [options_p.limit] - optional max number of results to return, returns all if not supplied\n         * @param {number} [options_p.cutoff] - minimum score that will get returned 0-100\n         * @param {boolean} [options_p.useCollator] - Use `Intl.Collator` for locale-sensitive string comparison.\n         * @param {number} [options_p.astral] - Use astral aware calculation\n         * @param {string} [options_p.normalize] - Normalize unicode representations\n         * @param {boolean} [options_p.full_process] - Apply basic cleanup, non-alphanumeric to whitespace etc. if true. default true\n         * @param {boolean} [options_p.force_ascii] - Strip non-ascii in full_process if true (non-ascii will not become whtespace), only applied if full_process is true as well, default false\n         * @param {boolean} [options_p.collapseWhitespace] - Collapse consecutive white space during full_process, default true\n         * @param {boolean} [options_p.trySimple] - try simple/partial ratio as part of (parial_)token_set_ratio test suite\n         * @param {boolean} [options_p.sortBySimilarity] - sort tokens by similarity to each other before combining instead of alphabetically\n         * @param {string} [options_p.wildcards] - characters that will be used as wildcards if provided\n         * @param {boolean} [options_p.returnObjects] - return array of object instead of array of tuples; default false\n         * @returns {Array[] | Object[]} - array of choice results with their computed ratios (0-100).\n         */\n        var options = clone_and_set_option_defaults(options_p);\n        var numchoices;\n        if (_isArray(choices)) {\n            numchoices = choices.length;\n        }\n        else if (!(choices instanceof Object)) {\n            throw new Error(\"Invalid choices\");\n        }\n        else numchoices = _keys(choices).length;\n        if (!choices || numchoices === 0) {\n            if (typeof console !== undefined) console.warn(\"No choices\");\n            return [];\n        }\n        if (options.processor && typeof options.processor !== \"function\") {\n            throw new Error(\"Invalid Processor\");\n        }\n        if (!options.processor) options.processor = function (x) { return x; }\n        if (options.scorer && typeof options.scorer !== \"function\") {\n            throw new Error(\"Invalid Scorer\");\n        }\n        if (!options.scorer) {\n            options.scorer = QRatio;\n        }\n        var isCustom = isCustomFunc(options.scorer); // check if func name is one of fuzzball's, so don't use same names..\n        if (!options.cutoff || typeof options.cutoff !== \"number\") { options.cutoff = -1;}\n        var pre_processor = function(choice, force_ascii) {return choice;}\n        if (options.full_process) {\n            pre_processor = full_process;\n            if (!isCustom) options.processed = true; // to let wildcardLeven know and not run again after we set fp to false below\n        }\n        var normalize = false;\n        if (!isCustom) { // if custom scorer func let scorer handle it\n            query = pre_processor(query, options);\n            options.full_process = false;\n            if (options.astral && options.normalize) {\n                options.normalize = false;  // don't normalize again in ratio if doing here\n                if (String.prototype.normalize) {\n                    normalize = true\n                    query = query.normalize();\n                }\n                else {\n                    if (typeof console !== undefined) console.warn(\"Normalization not supported in your environment\");\n                }\n            }\n            if (query.length === 0) if (typeof console !== undefined) console.warn(\"Processed query is empty string\");\n        }\n        var results = [];\n        var anyblank = false;\n        var tsort = false;\n        var tset = false;\n        if (options.scorer.name === \"token_sort_ratio\" || options.scorer.name === \"partial_token_sort_ratio\") {\n            var proc_sorted_query = process_and_sort(query);\n            tsort = true;\n        }\n        else if (options.scorer.name === \"token_set_ratio\" || options.scorer.name === \"partial_token_set_ratio\") {\n            var query_tokens = tokenize(query, options);\n            tset = true;\n        }\n\n        var result, mychoice, cmpHeap, cmpSort;\n        if (options.returnObjects) {\n            cmpHeap = function (a, b) { return a.score - b.score; };\n            cmpSort = function (a, b) { return b.score - a.score; };\n        }\n        else {\n            cmpHeap = function (a, b) { return a[1] - b[1]; };\n            cmpSort = function (a, b) { return b[1] - a[1]; };\n        }\n        _forEach(choices, function (value, key) {\n            options.tokens = undefined;\n            options.proc_sorted = false;\n            if (tsort) {\n                options.proc_sorted = true;\n                if (value && value.proc_sorted) mychoice = value.proc_sorted;\n                else {\n                    mychoice = pre_processor(options.processor(value), options);\n                    mychoice = process_and_sort(normalize ? mychoice.normalize() : mychoice);\n                }\n                result = options.scorer(proc_sorted_query, mychoice, options);\n            }\n            else if (tset) {\n                mychoice = \"x\"; //dummy string so it validates, if either tokens is [] all 3 tests will still be 0\n                if (value && value.tokens) {\n                    options.tokens = [query_tokens, value.tokens];\n                    if (options.trySimple) mychoice = pre_processor(options.processor(value), options);\n                }\n                else {\n                    mychoice = pre_processor(options.processor(value), options);\n                    options.tokens = [query_tokens, tokenize((normalize ? mychoice.normalize() : mychoice), options)]\n                }\n                //query and mychoice only used for validation here unless trySimple = true\n                result = options.scorer(query, mychoice, options);\n            }\n            else if (isCustom) {\n                // options.full_process should be unmodified, don't pre-process here since mychoice maybe not string\n                mychoice = options.processor(value);\n                result = options.scorer(query, mychoice, options);\n            }\n            else {\n                mychoice = pre_processor(options.processor(value), options);\n                if (typeof mychoice !== \"string\" || mychoice.length === 0) anyblank = true;\n                if (normalize && typeof mychoice === \"string\") mychoice = mychoice.normalize();\n                result = options.scorer(query, mychoice, options);\n            }\n            if (result > options.cutoff) {\n                if (options.returnObjects) results.push({choice: value, score: result, key: key});\n                else results.push([value, result, key]);\n            }\n        });\n\n        if (anyblank) if (typeof console !== undefined) console.log(\"One or more choices were empty. (post-processing if applied)\")\n        if (options.limit && typeof options.limit === \"number\" && options.limit > 0 && options.limit < numchoices && !options.unsorted) {\n            results = Heap.nlargest(results, options.limit, cmpHeap);\n        }\n        else if (!options.unsorted) {\n            results = results.sort(cmpSort);\n        }\n        return results;\n    }\n\n    function extractAsync(query, choices, options_p, callback) {\n        /**\n         * Return the top scoring items from an array (or assoc array) of choices\n         *\n         * @function extractAsync\n         * @param query - the search term.\n         * @param {String[]|Object[]|Object} choices - array of strings, or array of choice objects if processor is supplied, or object of form {key: choice}\n         * @param {Object} [options_p] - Additional options.\n         * @param {function} [options_p.scorer] - takes two values and returns a score, will be passed options as 3rd argument\n         * @param {function} [options_p.processor] - takes each choice and outputs a value to be used for Scoring\n         * @param {number} [options_p.limit] - optional max number of results to return, returns all if not supplied\n         * @param {number} [options_p.cutoff] - minimum score that will get returned 0-100\n         * @param {boolean} [options_p.useCollator] - Use `Intl.Collator` for locale-sensitive string comparison.\n         * @param {number} [options_p.astral] - Use astral aware calculation\n         * @param {string} [options_p.normalize] - Normalize unicode representations\n         * @param {boolean} [options_p.full_process] - Apply basic cleanup, non-alphanumeric to whitespace etc. if true. default true\n         * @param {boolean} [options_p.force_ascii] - Strip non-ascii in full_process if true (non-ascii will not become whtespace), only applied if full_process is true as well, default false\n         * @param {boolean} [options_p.collapseWhitespace] - Collapse consecutive white space during full_process, default true\n         * @param {boolean} [options_p.trySimple] - try simple/partial ratio as part of (parial_)token_set_ratio test suite\n         * @param {boolean} [options_p.sortBySimilarity] - sort tokens by similarity to each other before combining instead of alphabetically\n         * @param {string} [options_p.wildcards] - characters that will be used as wildcards if provided\n         * @param {boolean} [options_p.returnObjects] - return array of object instead of array of tuples; default false\n         * @param {Object} [options_p.abortController] - track abortion\n         * @param {Object} [options_p.cancelToken] - track cancellation\n         * @param {number} [options_p.asyncLoopOffset] - number of rows to run in between every async loop iteration, default 256\n         * @param {function} callback - node style callback (err, arrayOfResults)\n         */\n        var options = clone_and_set_option_defaults(options_p);\n\n        var abortController;\n        if (typeof options_p.abortController === \"object\") {\n            abortController = options_p.abortController;\n        }\n\n        var cancelToken;\n        if (typeof options_p.cancelToken === \"object\") {\n            cancelToken = options_p.cancelToken;\n        }\n\n        var loopOffset = 256;\n        if (typeof options.asyncLoopOffset === 'number') {\n            if (options.asyncLoopOffset < 1) loopOffset = 1;\n            else loopOffset = options.asyncLoopOffset;\n        }\n\n        var isArray = false;\n        var numchoices;\n        if (choices && choices.length && _isArray(choices)) {\n            numchoices = choices.length;\n            isArray = true; //if array don't check hasOwnProperty every time below\n        }\n        else if (!(choices instanceof Object)) {\n            callback(new Error(\"Invalid choices\"));\n            return;\n        }\n        else numchoices = Object.keys(choices).length;\n        if (!choices || numchoices === 0) {\n            if (typeof console !== undefined) console.warn(\"No choices\");\n            callback(null, []);\n            return;\n        }\n        if (options.processor && typeof options.processor !== \"function\") {\n            callback(new Error(\"Invalid Processor\"));\n            return;\n        }\n        if (!options.processor) options.processor = function (x) { return x; }\n        if (options.scorer && typeof options.scorer !== \"function\") {\n            callback(new Error(\"Invalid Scorer\"));\n            return;\n        }\n        if (!options.scorer) {\n            options.scorer = QRatio;\n        }\n        var isCustom = isCustomFunc(options.scorer); // check if func name is one of fuzzball's, so don't use same names..\n        if (!options.cutoff || typeof options.cutoff !== \"number\") { options.cutoff = -1; }\n        var pre_processor = function (choice, force_ascii) { return choice; }\n        if (options.full_process) {\n            pre_processor = full_process;\n            if (!isCustom) options.processed = true; // to let wildcardLeven know and not run again after we set fp to false below\n        }\n        var normalize = false;\n        if (!isCustom) { // if custom scorer func let scorer handle it\n            query = pre_processor(query, options);\n            options.full_process = false;\n            if (options.astral && options.normalize) {\n                options.normalize = false;  // don't normalize again in ratio if doing here\n                if (String.prototype.normalize) {\n                    normalize = true\n                    query = query.normalize();\n                }\n                else {\n                    if (typeof console !== undefined) console.warn(\"Normalization not supported in your environment\");\n                }\n            }\n            if (query.length === 0) if (typeof console !== undefined) console.warn(\"Processed query is empty string\");\n        }\n        var results = [];\n        var anyblank = false;\n        var tsort = false;\n        var tset = false;\n        if (options.scorer.name === \"token_sort_ratio\" || options.scorer.name === \"partial_token_sort_ratio\") {\n            var proc_sorted_query = process_and_sort(query);\n            tsort = true;\n        }\n        else if (options.scorer.name === \"token_set_ratio\" || options.scorer.name === \"partial_token_set_ratio\") {\n            var query_tokens = tokenize(query, options);\n            tset = true;\n        }\n        var idx, mychoice, result, cmpHeap, cmpSort;\n        if (options.returnObjects) {\n            cmpHeap = function (a, b) { return a.score - b.score; };\n            cmpSort = function (a, b) { return b.score - a.score; };\n        }\n        else {\n            cmpHeap = function (a, b) { return a[1] - b[1]; };\n            cmpSort = function (a, b) { return b[1] - a[1]; };\n        }\n        var keys = Object.keys(choices);\n        isArray ? searchLoop(0) : searchLoop(keys[0], 0);\n        function searchLoop(c, i) {\n            if (isArray || choices.hasOwnProperty(c)) {\n                options.tokens = undefined;\n                options.proc_sorted = false;\n                if (tsort) {\n                    options.proc_sorted = true;\n                    if (choices[c] && choices[c].proc_sorted) mychoice = choices[c].proc_sorted;\n                    else {\n                        mychoice = pre_processor(options.processor(choices[c]), options);\n                        mychoice = process_and_sort(normalize ? mychoice.normalize() : mychoice);\n                    }\n                    result = options.scorer(proc_sorted_query, mychoice, options);\n                }\n                else if (tset) {\n                    mychoice = \"x\"; //dummy string so it validates\n                    if (choices[c] && choices[c].tokens) {\n                        options.tokens = [query_tokens, choices[c].tokens];\n                        if (options.trySimple) mychoice = pre_processor(options.processor(choices[c]), options);\n                    }\n                    else {\n                        mychoice = pre_processor(options.processor(choices[c]), options);\n                        options.tokens = [query_tokens, tokenize((normalize ? mychoice.normalize() : mychoice), options)]\n                    }\n                    //query and mychoice only used for validation here unless trySimple = true\n                    result = options.scorer(query, mychoice, options);\n                }\n                else if (isCustom) {\n                    // options.full_process should be unmodified, don't pre-process here since mychoice maybe not string\n                    mychoice = options.processor(choices[c]);\n                    result = options.scorer(query, mychoice, options);\n                }\n                else {\n                    mychoice = pre_processor(options.processor(choices[c]), options);\n                    if (typeof mychoice !== \"string\" || mychoice.length === 0) anyblank = true;\n                    if (normalize && typeof mychoice === \"string\") mychoice = mychoice.normalize();\n                    result = options.scorer(query, mychoice, options);\n                }\n                if (isArray) idx = parseInt(c);\n                else idx = c;\n                if (result > options.cutoff) {\n                    if (options.returnObjects) results.push({ choice: choices[c], score: result, key: idx });\n                    else results.push([choices[c], result, idx]);\n                }\n            }\n\n            if (abortController && abortController.signal.aborted === true) {\n                callback(new Error(\"aborted\"));\n                return;\n            }\n\n            if (cancelToken && cancelToken.canceled === true) {\n                callback(new Error(\"canceled\"));\n                return;\n            }\n\n            if (isArray && c < choices.length - 1) {\n                if (c % loopOffset === 0) { setImmediate(function () { searchLoop(c + 1) }); }\n                else { searchLoop(c + 1); }\n            }\n            else if (i < keys.length - 1) {\n                if (i % loopOffset === 0) {setImmediate(function () { searchLoop(keys[i + 1], i + 1); }); }\n                else { searchLoop(keys[i + 1], i + 1); }\n            }\n            else {\n                if (anyblank) if (typeof console !== undefined) console.log(\"One or more choices were empty. (post-processing if applied)\")\n                if (options.limit && typeof options.limit === \"number\" && options.limit > 0 && options.limit < numchoices && !options.unsorted) {\n                    results = Heap.nlargest(results, options.limit, cmpHeap);\n                }\n                else if (!options.unsorted) {\n                    results = results.sort(cmpSort);\n                }\n                callback(null, results);\n            }\n        }\n    }\n\n\n/** Main Scoring Code */\n\n    function _cosineSim(v1, v2, options) {\n        var keysV1 = Object.keys(v1);\n        var keysV2 = Object.keys(v2);\n\n        var intersection = _intersect(keysV1, keysV2);\n\n        var prods = intersection.map(function (x) { return v1[x] * v2[x]; })\n        var numerator = prods.reduce(function(acc, x) { return acc + x; }, 0);\n\n        var v1Prods = keysV1.map(function (x) { return Math.pow(v1[x], 2); });\n        var v1sum = v1Prods.reduce(function(acc, x) { return acc + x; }, 0);\n\n        var v2Prods = keysV2.map(function (x) { return Math.pow(v2[x], 2); });\n        var v2sum = v2Prods.reduce(function(acc, x) { return acc + x; }, 0);\n\n        var denominator = Math.sqrt(v1sum) * Math.sqrt(v2sum);\n        return numerator / denominator;\n\n    }\n\n    var WILDCARD_KEY = \"%*SuperUniqueWildcardKey*%\";\n    var normalWarnCharCounts = false;\n\n    function _getCharacterCounts(str, options) {\n        var normalString = str;\n        if (options.astral) {\n            if (options.normalize) {\n                if (String.prototype.normalize) {\n                    normalString = str.normalize();\n                } else {\n                    if (!normalWarnCharCounts) {\n                        if (typeof console !== undefined) console.warn(\"Normalization not supported in your environment\");\n                        normalWarnCharCounts = true;\n                    }\n                }\n            }\n            var charArray = _toArray(normalString)\n        } else {\n            var charArray = normalString.split(\"\");\n        }\n\n        var charCounts = {};\n        if (options.wildcards) {\n            for (var i = 0; i < charArray.length; i++) {\n                var char = charArray[i];\n                if (options.wildcards.indexOf(char) > -1) {\n                    if (charCounts[WILDCARD_KEY]) {\n                        charCounts[WILDCARD_KEY] += 1\n                    } else {\n                        charCounts[WILDCARD_KEY] = 1;\n                    }\n                } else if (charCounts[char]) {\n                    charCounts[char] += 1\n                } else {\n                    charCounts[char] = 1;\n                }\n            }\n        } else {\n            for (var i = 0; i < charArray.length; i++) {\n                var char = charArray[i];\n                if (charCounts[char]) {\n                    charCounts[char] += 1\n                } else {\n                    charCounts[char] = 1;\n                }\n            }\n        }\n\n        return charCounts;\n    }\n\n    // Sort sorted2 according to similarity to sorted1\n    function _token_similarity_sort(sorted1, sorted2, options) {\n        var oldSorted2 = sorted2;\n\n        var charCounts1 = sorted1.reduce(function(acc, str) {\n            acc[str] = _getCharacterCounts(str, options);\n            return acc;\n        }, {});\n\n        var charCounts2 = oldSorted2.reduce(function(acc, str) {\n            acc[str] = _getCharacterCounts(str, options);\n            return acc;\n        }, {});\n\n        var newSorted2 = [];\n        var i = 0;\n\n        while (oldSorted2.length && i < sorted1.length) {\n            // most similar to first token in s1, 2nd token, ... n tokens\n            // sort by similarity to sorted1[i], take most similar\n            var sim = _orderBy(oldSorted2, function (x) {\n                    return _cosineSim(charCounts1[sorted1[i]], charCounts2[x])\n                }, 'desc')[0];\n            newSorted2.push(sim);\n            i++;\n            oldSorted2 = oldSorted2.filter(function (token) { return token !== sim});\n        }\n        // if oldSorted2 is longer, append it to the end\n        return newSorted2.concat(oldSorted2);\n    }\n\n    function _order_token_lists (str1, tokens1, str2, tokens2) {\n        // To keep consistent ordering, assume shortest number of tokens, then str.length,\n        // is more significant, else fallback to sort alphabetacally\n        var first = tokens1;\n        var second = tokens2;\n\n        if (tokens1.length > tokens2.length) {\n            first = tokens2;\n            second = tokens1;\n        } else if (tokens1.length === tokens2.length) {\n            if (str1.length > str2.length) {\n                first = tokens2;\n                second = tokens1;\n            }\n            else {\n                var sortedStrings = [str1, str2].sort();\n                if (sortedStrings[0] === str2) {\n                    first = tokens2;\n                    second = tokens1;\n                }\n            }\n        }\n\n        return [first, second];\n    }\n\n    function _token_similarity_sort_ratio (str1, str2, options) {\n        if (!options.tokens) {\n            var tokens1 = tokenize(str1, options);\n            var tokens2 = tokenize(str2, options);\n        }\n        else {\n            var tokens1 = options.tokens[0];\n            var tokens2 = options.tokens[1];\n        }\n\n        var sorted1 = tokens1.sort();\n        var sorted2 = tokens2.sort();\n\n        var orderedTokenLists = _order_token_lists(str1, sorted1, str2, sorted2);\n        var first = orderedTokenLists[0];\n        var second = orderedTokenLists[1];\n\n        const newSecond = _token_similarity_sort(first, second, options);\n\n        if (!options.partial) {\n            return _ratio(first.join(\" \"), newSecond.join(\" \"), options);\n        } else {\n            return _partial_ratio(first.join(\" \"), newSecond.join(\" \"), options);\n        }\n    }\n\n\n    function _token_set(str1, str2, options) {\n\n        if (!options.tokens) {\n            var tokens1 = tokenize(str1, options);\n            var tokens2 = tokenize(str2, options);\n        }\n        else {\n            var tokens1 = options.tokens[0];\n            var tokens2 = options.tokens[1];\n        }\n\n        if (options.wildcards) {\n            var partWild = _partialRight(wildleven, options, leven);\n            var wildCompare = function (a, b) { return partWild(a, b) === 0; }\n            var intersection = _intersectWith(tokens1, tokens2, wildCompare);\n            var diff1to2 = _differenceWith(tokens1, tokens2, wildCompare);\n            var diff2to1 = _differenceWith(tokens2, tokens1, wildCompare);\n        }\n        else {\n            var intersection = _intersect(tokens1, tokens2);\n            var diff1to2 = _difference(tokens1, tokens2);\n            var diff2to1 = _difference(tokens2, tokens1);\n        }\n\n        var sorted_sect = intersection.sort().join(\" \");\n\n        var sorted_1to2List = diff1to2.sort();\n        var sorted_2to1List = diff2to1.sort();\n\n        if (options.sortBySimilarity) {\n            var orderedTokenLists = _order_token_lists(str1, sorted_1to2List, str2, sorted_2to1List);\n            var first = orderedTokenLists[0];\n            var second = orderedTokenLists[1];\n\n            var sorted_1to2 = first.join(\" \");\n            var sorted_2to1 = _token_similarity_sort(first, second, options).join(\" \");\n        } else {\n            var sorted_1to2 = sorted_1to2List.join(\" \");\n            var sorted_2to1 = sorted_2to1List.join(\" \");\n        }\n\n        var combined_1to2 = sorted_sect + \" \" + sorted_1to2;\n        var combined_2to1 = sorted_sect + \" \" + sorted_2to1;\n\n        sorted_sect = sorted_sect.trim();\n        combined_1to2 = combined_1to2.trim();\n        combined_2to1 = combined_2to1.trim();\n        var ratio_func = _ratio;\n        if (options.partial) {\n            ratio_func = _partial_ratio;\n            if (sorted_sect.length > 0) return 100; // will always be 100 anyway\n        }\n\n        var pairwise = [\n            ratio_func(sorted_sect, combined_1to2, options),\n            ratio_func(sorted_sect, combined_2to1, options),\n            ratio_func(combined_1to2, combined_2to1, options)\n        ]\n        if (options.trySimple) {\n            pairwise.push(ratio_func(str1, str2, options));\n        }\n        return Math.max.apply(null, pairwise);\n    }\n\n    var normalWarn = false;\n    function _ratio(str1, str2, options) {\n        if (!validate(str1)) return 0;\n        if (!validate(str2)) return 0;\n        if (options.ratio_alg && options.ratio_alg === \"difflib\") {\n            var m = new SequenceMatcher(null, str1, str2);\n            var r = m.ratio();\n            return Math.round(100 * r);\n        }\n        //to match behavior of python-Levenshtein/fuzzywuzzy, substitution cost is 2 if not specified, or would default to 1\n        if (typeof options.subcost === \"undefined\") options.subcost = 2;\n        var levdistance, lensum;\n        if (options.astral) {\n            if (options.normalize) {\n                if (String.prototype.normalize) {\n                    str1 = str1.normalize();\n                    str2 = str2.normalize();\n                }\n                else {\n                    if (!normalWarn) {\n                        if (typeof console !== undefined) console.warn(\"Normalization not supported in your environment\");\n                        normalWarn = true;\n                    }\n                }\n            }\n            levdistance = iLeven(str1, str2, options, _toArray);\n            lensum = _toArray(str1).length + _toArray(str2).length\n        }\n        else {\n            if (!options.wildcards) {\n                levdistance = leven(str1, str2, options);\n                lensum = str1.length + str2.length;\n            }\n            else {\n                levdistance = wildleven(str1, str2, options, leven); // falls back to leven if invalid\n                lensum = str1.length + str2.length;\n            }\n        }\n        return Math.round(100 * ((lensum - levdistance)/lensum));\n    }\n\n    function _partial_ratio(str1, str2, options) {\n        if (!validate(str1)) return 0;\n        if (!validate(str2)) return 0;\n        if (str1.length <= str2.length) {\n            var shorter = str1\n            var longer = str2\n        }\n        else {\n            var shorter = str2\n            var longer = str1\n        }\n        var m = new SequenceMatcher(null, shorter, longer);\n        var blocks = m.getMatchingBlocks();\n        var scores = [];\n        for (var b = 0; b < blocks.length; b++) {\n            var long_start = (blocks[b][1] - blocks[b][0]) > 0 ? (blocks[b][1] - blocks[b][0]) : 0;\n            var long_end = long_start + shorter.length;\n            var long_substr = longer.substring(long_start,long_end);\n            var r = _ratio(shorter,long_substr,options);\n            if (r > 99.5) return 100;\n            else scores.push(r);\n        }\n        return Math.max.apply(null, scores);\n    }\n\n    //polyfill for Object.keys\n    // From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\n    if (!Object.keys) {\n        Object.keys = (function () {\n            'use strict';\n            var hasOwnProperty = Object.prototype.hasOwnProperty,\n                hasDontEnumBug = !({ toString: null }).propertyIsEnumerable('toString'),\n                dontEnums = [\n                    'toString',\n                    'toLocaleString',\n                    'valueOf',\n                    'hasOwnProperty',\n                    'isPrototypeOf',\n                    'propertyIsEnumerable',\n                    'constructor'\n                ],\n                dontEnumsLength = dontEnums.length;\n\n            return function (obj) {\n                if (typeof obj !== 'object' && (typeof obj !== 'function' || obj === null)) {\n                    throw new TypeError('Object.keys called on non-object');\n                }\n\n                var result = [], prop, i;\n\n                for (prop in obj) {\n                    if (hasOwnProperty.call(obj, prop)) {\n                        result.push(prop);\n                    }\n                }\n\n                if (hasDontEnumBug) {\n                    for (i = 0; i < dontEnumsLength; i++) {\n                        if (hasOwnProperty.call(obj, dontEnums[i])) {\n                            result.push(dontEnums[i]);\n                        }\n                    }\n                }\n                return result;\n            };\n        } ());\n    }\n\n    var extractAsPromised = undefined;\n    if (typeof Promise !== 'undefined') {\n        extractAsPromised = function(query, choices, options) {\n            return new Promise(function(resolve, reject){\n                extractAsync(query, choices, options, function(err, response){\n                    if (err) reject(err);\n                    else resolve(response);\n                });\n            });\n        };\n    }\n\n    var fuzzball = {\n        distance: distance,\n        ratio: QRatio,\n        partial_ratio: partial_ratio,\n        token_set_ratio: token_set_ratio,\n        token_sort_ratio: token_sort_ratio,\n        partial_token_set_ratio: partial_token_set_ratio,\n        partial_token_sort_ratio: partial_token_sort_ratio,\n        token_similarity_sort_ratio: token_similarity_sort_ratio,\n        partial_token_similarity_sort_ratio: partial_token_similarity_sort_ratio,\n        WRatio: WRatio,\n        full_process: full_process,\n        extract: extract,\n        extractAsync: extractAsync,\n        extractAsPromised: extractAsPromised,\n        process_and_sort: process_and_sort,\n        unique_tokens: tokenize,\n        dedupe: dedupe\n    };\n\n     module.exports = fuzzball;\n} ());\n"]},"metadata":{},"sourceType":"script"}
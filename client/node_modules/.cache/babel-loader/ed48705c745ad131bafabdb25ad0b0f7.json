{"ast":null,"code":"import _slicedToArray from\"/Users/armanrafati/Documents/Cleanify/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{createContext,useContext,useState}from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";var GlobalContext=/*#__PURE__*/createContext(\"\");var GlobalContextProvider=function GlobalContextProvider(_ref){var children=_ref.children;var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),token=_useState2[0],setToken=_useState2[1];var _useState3=useState(),_useState4=_slicedToArray(_useState3,2),checkedPlaylist=_useState4[0],setCheckedPlaylist=_useState4[1];var _useState5=useState(),_useState6=_slicedToArray(_useState5,2),playlists=_useState6[0],setPlaylists=_useState6[1];var _useState7=useState(),_useState8=_slicedToArray(_useState7,2),tracks=_useState8[0],setTracks=_useState8[1];var _useState9=useState(),_useState10=_slicedToArray(_useState9,2),cleanedPlaylistID=_useState10[0],setCleanedPlaylistID=_useState10[1];var _useState11=useState([]),_useState12=_slicedToArray(_useState11,2),songsToResolve=_useState12[0],setSongsToResolve=_useState12[1];return/*#__PURE__*/_jsx(GlobalContext.Provider,{value:{token:token,setToken:setToken,checkedPlaylist:checkedPlaylist,setCheckedPlaylist:setCheckedPlaylist,playlists:playlists,setPlaylists:setPlaylists,tracks:tracks,setTracks:setTracks,cleanedPlaylistID:cleanedPlaylistID,setCleanedPlaylistID:setCleanedPlaylistID,songsToResolve:songsToResolve,setSongsToResolve:setSongsToResolve},children:children});};export default GlobalContextProvider;export var useGlobalState=function useGlobalState(){var context=useContext(GlobalContext);if(!context){throw new Error(\"useGlobalState must be used inside the GlobalContext provider\");}return context;};","map":{"version":3,"sources":["/Users/armanrafati/Documents/Cleanify/client/src/contexts/GlobalContext.jsx"],"names":["createContext","useContext","useState","GlobalContext","GlobalContextProvider","children","token","setToken","checkedPlaylist","setCheckedPlaylist","playlists","setPlaylists","tracks","setTracks","cleanedPlaylistID","setCleanedPlaylistID","songsToResolve","setSongsToResolve","useGlobalState","context","Error"],"mappings":"kIAAA,OAASA,aAAT,CAAwBC,UAAxB,CAAoCC,QAApC,KAAoD,OAApD,C,2CAEA,GAAMC,CAAAA,aAAa,cAAGH,aAAa,CAAC,EAAD,CAAnC,CAEA,GAAMI,CAAAA,qBAAqB,CAAG,QAAxBA,CAAAA,qBAAwB,MAAkB,IAAfC,CAAAA,QAAe,MAAfA,QAAe,CAC9C,cAA0BH,QAAQ,CAAC,EAAD,CAAlC,wCAAOI,KAAP,eAAcC,QAAd,eACA,eAA8CL,QAAQ,EAAtD,yCAAOM,eAAP,eAAwBC,kBAAxB,eACA,eAAkCP,QAAQ,EAA1C,yCAAOQ,SAAP,eAAkBC,YAAlB,eACA,eAA4BT,QAAQ,EAApC,yCAAOU,MAAP,eAAeC,SAAf,eACA,eAAkDX,QAAQ,EAA1D,0CAAOY,iBAAP,gBAA0BC,oBAA1B,gBACA,gBAA4Cb,QAAQ,CAAC,EAAD,CAApD,2CAAOc,cAAP,gBAAuBC,iBAAvB,gBAEA,mBACE,KAAC,aAAD,CAAe,QAAf,EACE,KAAK,CAAE,CACLX,KAAK,CAALA,KADK,CAELC,QAAQ,CAARA,QAFK,CAGLC,eAAe,CAAfA,eAHK,CAILC,kBAAkB,CAAlBA,kBAJK,CAKLC,SAAS,CAATA,SALK,CAMLC,YAAY,CAAZA,YANK,CAOLC,MAAM,CAANA,MAPK,CAQLC,SAAS,CAATA,SARK,CASLC,iBAAiB,CAAjBA,iBATK,CAULC,oBAAoB,CAApBA,oBAVK,CAWLC,cAAc,CAAdA,cAXK,CAYLC,iBAAiB,CAAjBA,iBAZK,CADT,UAgBGZ,QAhBH,EADF,CAoBD,CA5BD,CA8BA,cAAeD,CAAAA,qBAAf,CAEA,MAAO,IAAMc,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,EAAM,CAClC,GAAMC,CAAAA,OAAO,CAAGlB,UAAU,CAACE,aAAD,CAA1B,CAEA,GAAI,CAACgB,OAAL,CAAc,CACZ,KAAM,IAAIC,CAAAA,KAAJ,CACJ,+DADI,CAAN,CAGD,CAED,MAAOD,CAAAA,OAAP,CACD,CAVM","sourcesContent":["import { createContext, useContext, useState } from \"react\";\n\nconst GlobalContext = createContext(\"\");\n\nconst GlobalContextProvider = ({ children }) => {\n  const [token, setToken] = useState(\"\");\n  const [checkedPlaylist, setCheckedPlaylist] = useState();\n  const [playlists, setPlaylists] = useState();\n  const [tracks, setTracks] = useState();\n  const [cleanedPlaylistID, setCleanedPlaylistID] = useState();\n  const [songsToResolve, setSongsToResolve] = useState([]);\n\n  return (\n    <GlobalContext.Provider\n      value={{\n        token,\n        setToken,\n        checkedPlaylist,\n        setCheckedPlaylist,\n        playlists,\n        setPlaylists,\n        tracks,\n        setTracks,\n        cleanedPlaylistID,\n        setCleanedPlaylistID,\n        songsToResolve,\n        setSongsToResolve,\n      }}\n    >\n      {children}\n    </GlobalContext.Provider>\n  );\n};\n\nexport default GlobalContextProvider;\n\nexport const useGlobalState = () => {\n  const context = useContext(GlobalContext);\n\n  if (!context) {\n    throw new Error(\n      \"useGlobalState must be used inside the GlobalContext provider\"\n    );\n  }\n\n  return context;\n};\n"]},"metadata":{},"sourceType":"module"}
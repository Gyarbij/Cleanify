{"ast":null,"code":"import _asyncToGenerator from\"/Users/armanrafati/Documents/Cleanify/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _regeneratorRuntime from\"/Users/armanrafati/Documents/Cleanify/client/node_modules/@babel/runtime/regenerator/index.js\";import{Center,Radio,Spinner,Text}from\"@chakra-ui/react\";import{useEffect,useMemo}from\"react\";import{useGlobalState}from\"../../contexts/GlobalContext\";import{getPlaylists}from\"../../utils/api\";import CustomTable from\"./CustomTable\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var PlaylistTable=function PlaylistTable(){var _useGlobalState=useGlobalState(),playlists=_useGlobalState.playlists,setPlaylists=_useGlobalState.setPlaylists;useEffect(function(){var loadPlaylists=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var p;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return getPlaylists();case 2:p=_context.sent;setPlaylists(p);case 4:case\"end\":return _context.stop();}}},_callee);}));return function loadPlaylists(){return _ref.apply(this,arguments);};}();loadPlaylists();},[setPlaylists]);var data=[];playlists&&playlists.items.map(function(playlist,index){return data.push({entry:{name:playlist.name,idx:String(index)}});});var columns=useMemo(function(){return[{Header:\"Playlists\",accessor:\"entry\",Cell:function Cell(_ref2){var _ref2$value=_ref2.value,name=_ref2$value.name,idx=_ref2$value.idx;return/*#__PURE__*/_jsx(Radio,{value:String(idx),children:name});}}];},[]);return data.length===0?/*#__PURE__*/_jsxs(Center,{h:\"700px\",flexDir:\"column\",children:[/*#__PURE__*/_jsx(Text,{mb:3,children:\"Fetching playlists\"}),/*#__PURE__*/_jsx(Spinner,{})]}):/*#__PURE__*/_jsx(CustomTable,{columns:columns,data:data,hasRadio:true});};export default PlaylistTable;","map":{"version":3,"sources":["/Users/armanrafati/Documents/Cleanify/client/src/components/Tables/PlaylistTable.jsx"],"names":["Center","Radio","Spinner","Text","useEffect","useMemo","useGlobalState","getPlaylists","CustomTable","PlaylistTable","playlists","setPlaylists","loadPlaylists","p","data","items","map","playlist","index","push","entry","name","idx","String","columns","Header","accessor","Cell","value","length"],"mappings":"uQAAA,OAASA,MAAT,CAAiBC,KAAjB,CAAwBC,OAAxB,CAAiCC,IAAjC,KAA6C,kBAA7C,CACA,OAASC,SAAT,CAAoBC,OAApB,KAAmC,OAAnC,CACA,OAASC,cAAT,KAA+B,8BAA/B,CACA,OAASC,YAAT,KAA6B,iBAA7B,CACA,MAAOC,CAAAA,WAAP,KAAwB,eAAxB,C,wFAEA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,EAAM,CAC1B,oBAAoCH,cAAc,EAAlD,CAAQI,SAAR,iBAAQA,SAAR,CAAmBC,YAAnB,iBAAmBA,YAAnB,CAEAP,SAAS,CAAC,UAAM,CACd,GAAMQ,CAAAA,aAAa,0FAAG,+JACJL,CAAAA,YAAY,EADR,QACdM,CADc,eAEpBF,YAAY,CAACE,CAAD,CAAZ,CAFoB,sDAAH,kBAAbD,CAAAA,aAAa,0CAAnB,CAIAA,aAAa,GACd,CANQ,CAMN,CAACD,YAAD,CANM,CAAT,CAQA,GAAMG,CAAAA,IAAI,CAAG,EAAb,CACAJ,SAAS,EACPA,SAAS,CAACK,KAAV,CAAgBC,GAAhB,CAAoB,SAACC,QAAD,CAAWC,KAAX,QAClBJ,CAAAA,IAAI,CAACK,IAAL,CAAU,CACRC,KAAK,CAAE,CAAEC,IAAI,CAAEJ,QAAQ,CAACI,IAAjB,CAAuBC,GAAG,CAAEC,MAAM,CAACL,KAAD,CAAlC,CADC,CAAV,CADkB,EAApB,CADF,CAOA,GAAMM,CAAAA,OAAO,CAAGnB,OAAO,CACrB,iBAAM,CACJ,CACEoB,MAAM,YADR,CAEEC,QAAQ,CAAE,OAFZ,CAGEC,IAAI,CAAE,2CAAGC,KAAH,CAAYP,IAAZ,aAAYA,IAAZ,CAAkBC,GAAlB,aAAkBA,GAAlB,oBACJ,KAAC,KAAD,EAAO,KAAK,CAAEC,MAAM,CAACD,GAAD,CAApB,UAA4BD,IAA5B,EADI,EAHR,CADI,CAAN,EADqB,CAUrB,EAVqB,CAAvB,CAaA,MAAOP,CAAAA,IAAI,CAACe,MAAL,GAAgB,CAAhB,cACL,MAAC,MAAD,EAAQ,CAAC,CAAC,OAAV,CAAkB,OAAO,CAAC,QAA1B,wBACE,KAAC,IAAD,EAAM,EAAE,CAAE,CAAV,gCADF,cAEE,KAAC,OAAD,IAFF,GADK,cAML,KAAC,WAAD,EAAa,OAAO,CAAEL,OAAtB,CAA+B,IAAI,CAAEV,IAArC,CAA2C,QAAQ,CAAE,IAArD,EANF,CAQD,CAxCD,CAyCA,cAAeL,CAAAA,aAAf","sourcesContent":["import { Center, Radio, Spinner, Text } from \"@chakra-ui/react\";\nimport { useEffect, useMemo } from \"react\";\nimport { useGlobalState } from \"../../contexts/GlobalContext\";\nimport { getPlaylists } from \"../../utils/api\";\nimport CustomTable from \"./CustomTable\";\n\nconst PlaylistTable = () => {\n  const { playlists, setPlaylists } = useGlobalState();\n\n  useEffect(() => {\n    const loadPlaylists = async () => {\n      const p = await getPlaylists();\n      setPlaylists(p);\n    };\n    loadPlaylists();\n  }, [setPlaylists]);\n\n  const data = [];\n  playlists &&\n    playlists.items.map((playlist, index) =>\n      data.push({\n        entry: { name: playlist.name, idx: String(index) },\n      })\n    );\n\n  const columns = useMemo(\n    () => [\n      {\n        Header: `Playlists`,\n        accessor: \"entry\",\n        Cell: ({ value: { name, idx } }) => (\n          <Radio value={String(idx)}>{name}</Radio>\n        ),\n      },\n    ],\n    []\n  );\n\n  return data.length === 0 ? (\n    <Center h=\"700px\" flexDir=\"column\">\n      <Text mb={3}>Fetching playlists</Text>\n      <Spinner />\n    </Center>\n  ) : (\n    <CustomTable columns={columns} data={data} hasRadio={true} />\n  );\n};\nexport default PlaylistTable;\n"]},"metadata":{},"sourceType":"module"}
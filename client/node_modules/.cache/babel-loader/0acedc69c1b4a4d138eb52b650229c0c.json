{"ast":null,"code":"import _objectSpread from\"/Users/armanrafati/Documents/Cleanify/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _createClass from\"/Users/armanrafati/Documents/Cleanify/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _classCallCheck from\"/Users/armanrafati/Documents/Cleanify/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _inherits from\"/Users/armanrafati/Documents/Cleanify/client/node_modules/@babel/runtime/helpers/esm/inherits.js\";import _createSuper from\"/Users/armanrafati/Documents/Cleanify/client/node_modules/@babel/runtime/helpers/esm/createSuper.js\";import _wrapNativeSuper from\"/Users/armanrafati/Documents/Cleanify/client/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\";import _asyncToGenerator from\"/Users/armanrafati/Documents/Cleanify/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _regeneratorRuntime from\"/Users/armanrafati/Documents/Cleanify/client/node_modules/@babel/runtime/regenerator/index.js\";import axios from\"axios\";var instance=axios.create();var wait=function wait(next_retry_time){return new Promise(function(res){return setTimeout(res,next_retry_time*1000);});};instance.interceptors.request.use(function(config){var token=localStorage.getItem(\"api-key\");if(token){config.headers={Authorization:\"Bearer \".concat(token),\"Access-Control-Allow-Origin\":\"*\"};}return config;});instance.interceptors.response.use(function(response){return response.data;},/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(error){var next_retry_time;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!(error.response.status===429)){_context.next=6;break;}next_retry_time=error.response.headers[\"retry-after\"];console.log(\"Rate limited, retry after\",next_retry_time);if(!next_retry_time){_context.next=6;break;}wait(next_retry_time);return _context.abrupt(\"return\",instance.request(error.config));case 6:console.log(error);Promise.reject(error);case 8:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}());export var getUser=function getUser(){return handleResponse(instance.get(\"https://api.spotify.com/v1/me\"));};export var getPlaylists=function getPlaylists(){return handleResponse(instance.get(\"https://api.spotify.com/v1/me/playlists\"));};export var getTracks=function getTracks(playlistID){return handleResponse(instance.get(\"https://api.spotify.com/v1/playlists/\".concat(playlistID,\"/tracks\")));};export var getNextTracks=function getNextTracks(next){return handleResponse(instance.get(next));};export var createPlaylist=function createPlaylist(playlistName,userId){return handleResponse(instance.post(\"https://api.spotify.com/v1/users/\".concat(userId,\"/playlists\"),{name:playlistName,public:false}));};export var deletePlaylist=function deletePlaylist(playlistID){return handleResponse(instance.delete(\"https://api.spotify.com/v1/playlists/\".concat(playlistID,\"/followers\")));};export var addTracksToPlaylist=function addTracksToPlaylist(playlistID,trackIDs){return handleResponse(instance.post(\"https://api.spotify.com/v1/playlists/\".concat(playlistID,\"/tracks\"),{uris:trackIDs}));};export var searchForTracks=function searchForTracks(trackName){return handleResponse(instance.get(\"https://api.spotify.com/v1/search?q=\".concat(trackName,\"&type=track\")));};var APIError=/*#__PURE__*/function(_Error){_inherits(APIError,_Error);var _super=_createSuper(APIError);function APIError(){var _this;_classCallCheck(this,APIError);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.name=\"APIError\";return _this;}return _createClass(APIError);}(/*#__PURE__*/_wrapNativeSuper(Error));var handleResponse=function handleResponse(request){return request.then(function(res){return res;}).catch(function(error){var _error$response;var message=(_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.data.error;if(message){console.error(\"APIError:\",message,error);if(message===\"Invalid access token\"){localStorage.removeItem(\"api-key\");}return new APIError(_objectSpread(_objectSpread({},error),{},{message:message}));}else{return error;}});};","map":{"version":3,"sources":["/Users/armanrafati/Documents/Cleanify/client/src/utils/api.js"],"names":["axios","instance","create","wait","next_retry_time","Promise","res","setTimeout","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","response","data","error","status","console","log","reject","getUser","handleResponse","get","getPlaylists","getTracks","playlistID","getNextTracks","next","createPlaylist","playlistName","userId","post","name","public","deletePlaylist","delete","addTracksToPlaylist","trackIDs","uris","searchForTracks","trackName","APIError","Error","then","catch","message","removeItem"],"mappings":"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","sourcesContent":["import axios from \"axios\";\n\nconst instance = axios.create();\nconst wait = (next_retry_time) =>\n  new Promise((res) => setTimeout(res, next_retry_time * 1000));\n\ninstance.interceptors.request.use((config) => {\n  const token = localStorage.getItem(\"api-key\");\n  if (token) {\n    config.headers = {\n      Authorization: `Bearer ${token}`,\n      \"Access-Control-Allow-Origin\": \"*\",\n    };\n  }\n\n  return config;\n});\n\ninstance.interceptors.response.use(\n  (response) => response.data,\n  async (error) => {\n    if (error.response.status === 429) {\n      const next_retry_time = error.response.headers[\"retry-after\"];\n      console.log(\"Rate limited, retry after\", next_retry_time);\n      if (next_retry_time) {\n        wait(next_retry_time);\n        return instance.request(error.config);\n      }\n    }\n\n    console.log(error);\n    Promise.reject(error);\n  }\n);\n\nexport const getUser = () =>\n  handleResponse(instance.get(\"https://api.spotify.com/v1/me\"));\n\nexport const getPlaylists = () =>\n  handleResponse(instance.get(\"https://api.spotify.com/v1/me/playlists\"));\n\nexport const getTracks = (playlistID) =>\n  handleResponse(\n    instance.get(`https://api.spotify.com/v1/playlists/${playlistID}/tracks`)\n  );\n\nexport const getNextTracks = (next) => handleResponse(instance.get(next));\n\nexport const createPlaylist = (playlistName, userId) =>\n  handleResponse(\n    instance.post(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n      name: playlistName,\n      public: false,\n    })\n  );\n\nexport const deletePlaylist = (playlistID) =>\n  handleResponse(\n    instance.delete(\n      `https://api.spotify.com/v1/playlists/${playlistID}/followers`\n    )\n  );\n\nexport const addTracksToPlaylist = (playlistID, trackIDs) =>\n  handleResponse(\n    instance.post(`https://api.spotify.com/v1/playlists/${playlistID}/tracks`, {\n      uris: trackIDs,\n    })\n  );\n\nexport const searchForTracks = (trackName) => {\n  return handleResponse(\n    instance.get(`https://api.spotify.com/v1/search?q=${trackName}&type=track`)\n  );\n};\n\nclass APIError extends Error {\n  name = \"APIError\";\n}\n\nconst handleResponse = (request) =>\n  request\n    .then((res) => {\n      return res;\n    })\n    .catch((error) => {\n      const message = error.response?.data.error;\n      if (message) {\n        console.error(\"APIError:\", message, error);\n        if (message === \"Invalid access token\") {\n          localStorage.removeItem(\"api-key\");\n        }\n        return new APIError({ ...error, message });\n      } else {\n        return error;\n      }\n    });\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/armanrafati/Documents/Cleanify/client/src/pages/Home.jsx\",\n    _s = $RefreshSig$();\n\nimport { Heading, Flex, VStack, Text, Center } from \"@chakra-ui/layout\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { createPlaylist, getTracks, getNextTracks, getUser, deletePlaylist, addTracksToPlaylist, getPlaylists, searchForTracks } from \"../utils/api.js\";\nimport { Button, SimpleGrid, Container, useToast, useDisclosure } from \"@chakra-ui/react\";\nimport PlaylistTable from \"../components/Tables/PlaylistTable.jsx\";\nimport SongTable from \"../components/Tables/SongTable.jsx\";\nimport { useGlobalState } from \"../contexts/GlobalContext.jsx\";\nimport CleanSongTable from \"../components/Tables/CleanSongTable.jsx\";\nimport { SummaryModal } from \"../components/Modals/SummaryModal.jsx\";\nimport Failed from \"./Failed.jsx\";\nimport useAuth from \"../hooks/useAuth.jsx\";\nimport SpotifyWebApi from \"spotify-web-api-node\";\nimport { ConflictModal } from \"../components/Modals/Conflict/ConflictModal.jsx\";\nimport ProgressBar from \"../components/ProgressBar.jsx\";\nimport { CLIENT_ID } from \"../utils/Constants.jsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst fuzzball = require(\"fuzzball\");\n\nexport const spotifyApi = new SpotifyWebApi({\n  clientId: CLIENT_ID\n});\n\nconst Home = _ref => {\n  _s();\n\n  let {\n    code\n  } = _ref;\n  console.log(\"code from url\", code);\n  const accessToken = useAuth(code);\n  const [user, setUser] = useState();\n  const {\n    setToken,\n    setCheckedPlaylist,\n    songsToResolve,\n    setSongsToResolve\n  } = useGlobalState();\n  const [cleanifyStatus, setCleanifyStatus] = useState(false);\n  const [deleteStatus, setDeleteStatus] = useState(false);\n  const [cleanifyProgress, setCleanifyProgress] = useState(false);\n  useEffect(() => {\n    if (!accessToken) return;\n    console.log(\"Access token trying to set\");\n    spotifyApi.setAccessToken(accessToken);\n    setToken(accessToken);\n    spotifyApi.setAccessToken(accessToken);\n    localStorage.setItem(\"api-key\", accessToken);\n  }, [accessToken, setToken]);\n  const {\n    isOpen: isSummaryOpen,\n    onOpen: onSummaryOpen,\n    onClose: onSummaryClose\n  } = useDisclosure();\n  const {\n    isOpen: isResolveOpen,\n    onOpen: onResolveOpen,\n    onClose: onResolveClose\n  } = useDisclosure();\n  const [isCleanifyLoading, setisCleanifyLoading] = useState();\n  const toast = useToast();\n  const {\n    checkedPlaylist,\n    playlists,\n    tracks,\n    setPlaylists,\n    setTracks,\n    cleanedPlaylistID,\n    setCleanedPlaylistID\n  } = useGlobalState();\n  useEffect(() => {\n    const loadUser = async () => {\n      setUser(await getUser());\n    };\n\n    loadUser();\n  }, []);\n\n  const handleDelete = async () => {\n    setDeleteStatus(true);\n    setCheckedPlaylist(String(Number(checkedPlaylist) - 1) >= 0 ? String(Number(checkedPlaylist) - 1) : \"\");\n    await deletePlaylist(playlists.items[checkedPlaylist].id);\n    const refreshedPlaylists = await getPlaylists();\n\n    if (refreshedPlaylists instanceof Error) {\n      toast({\n        title: `Unable to perform action. Please try refreshing the page and log in again`,\n        position: \"top-right\",\n        status: \"error\",\n        duration: 7000,\n        isClosable: true\n      });\n      return;\n    }\n\n    setPlaylists(refreshedPlaylists);\n    setDeleteStatus(false);\n  };\n\n  const containSameArtists = (first, second) => {\n    if (first.artists.length !== second.artists.length) return false;\n    let artistCount = first.artists.length;\n\n    for (let index = 0; index < artistCount; index++) {\n      if (first.artists[index].name !== second.artists[index].name) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  const getAllTracks = useCallback(async () => {\n    setTracks({\n      items: []\n    });\n    const allTracks = [];\n    let tracks = await getTracks(playlists.items[checkedPlaylist].id);\n\n    if (tracks instanceof Error) {\n      toast({\n        title: `Unable to perform action. Please try refreshing the page and log in again`,\n        position: \"top-right\",\n        status: \"error\",\n        duration: 7000,\n        isClosable: true\n      });\n      return;\n    }\n\n    if (!tracks) {\n      toast({\n        title: `Error fetching all tracks. Refresh and try again`,\n        position: \"top-right\",\n        status: \"error\",\n        duration: 7000,\n        isClosable: true\n      });\n    }\n\n    allTracks.push(...tracks.items);\n\n    while (tracks && tracks.next) {\n      tracks = await getNextTracks(tracks.next);\n\n      if (!tracks) {\n        toast({\n          title: `Error fetching all tracks. Refresh and try again`,\n          position: \"top-right\",\n          status: \"error\",\n          duration: 7000,\n          isClosable: true\n        });\n      }\n\n      if (tracks && tracks.items) {\n        allTracks.push(...tracks.items);\n      }\n    }\n\n    tracks = {\n      items: allTracks\n    };\n    setTracks(tracks);\n    return allTracks; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [checkedPlaylist, setTracks, toast]);\n  useEffect(() => {\n    if (checkedPlaylist && checkedPlaylist >= 0) {\n      getAllTracks();\n    }\n  }, [checkedPlaylist, getAllTracks]);\n\n  const handleCleanify = async () => {\n    setCleanifyStatus(true);\n    await getAllTracks();\n    const cleanTrackIDs = [];\n    const explicitTracks = [];\n\n    for (let t of tracks.items) {\n      if (!t.track) continue;\n      t && t.track && t.track.explicit ? explicitTracks.push({\n        query: `${t.track.name} ${t.track.artists[0].name}`,\n        name: t.track.name,\n        artists: t.track.artists,\n        uri: t.track.uri,\n        link: t.track.external_urls.spotify\n      }) : cleanTrackIDs.push(t.track.uri);\n    }\n\n    const cleanVersionTrackIDs = [];\n    const remainingExplicitSongs = [];\n    const potentiallyCleanSongs = new Map();\n    const total = explicitTracks.length;\n    let index = 0;\n\n    for (let track of explicitTracks) {\n      index++;\n      if (track.query.length === 0) continue;\n      const trackResponses = await searchForTracks(track.query.trim().replaceAll(\"#\", \"\"));\n\n      if (!trackResponses) {\n        toast({\n          title: `Error searching for track. Refresh and try again`,\n          position: \"top-right\",\n          status: \"error\",\n          duration: 7000,\n          isClosable: true\n        });\n      }\n\n      if (trackResponses instanceof Error) {\n        toast({\n          title: `Unable to perform action. Please try refreshing the page and log in again`,\n          position: \"top-right\",\n          status: \"error\",\n          duration: 7000,\n          isClosable: true\n        });\n        return;\n      }\n\n      let isClean = false;\n\n      if (trackResponses && trackResponses.tracks.items.length > 0) {\n        for (let t of trackResponses.tracks.items) {\n          if (t && t.name && !t.explicit && containSameArtists(t, track)) {\n            if (fuzzball.distance(t.name, track.name) === 0) {\n              cleanVersionTrackIDs.push(t.uri);\n              isClean = true;\n              break;\n            } else if (fuzzball.ratio(t.name, track.name) > 1) {\n              if (potentiallyCleanSongs.has(track.name)) {\n                potentiallyCleanSongs.get(track.name).push({\n                  name: t.name,\n                  link: t.external_urls.spotify,\n                  uri: t.uri,\n                  original_track_uri: track.uri,\n                  original_track_link: track.link\n                });\n              } else {\n                potentiallyCleanSongs.set(track.name, [{\n                  name: t.name,\n                  link: t.external_urls.spotify,\n                  uri: t.uri,\n                  original_track_uri: track.uri,\n                  original_track_link: track.link\n                }]);\n              }\n            }\n          }\n        }\n\n        if (!isClean) {\n          remainingExplicitSongs.push({\n            name: track.name,\n            queryURL: `https://open.spotify.com/search/${encodeURIComponent(track.query)}`\n          });\n        }\n      }\n\n      setCleanifyProgress(index / total * 100);\n    }\n\n    setSongsToResolve(potentiallyCleanSongs);\n    const newPlaylist = await createPlaylist(`${playlists.items[checkedPlaylist].name} (Cleanified)`, user.id);\n    setPlaylists(await getPlaylists());\n    let allCleanSongs = [...cleanTrackIDs, ...cleanVersionTrackIDs];\n    let remainingSongs = [];\n\n    while (allCleanSongs.length > 0) {\n      remainingSongs = allCleanSongs.splice(0, 100);\n\n      if (remainingSongs.length > 0) {\n        await addTracksToPlaylist(newPlaylist.id, remainingSongs);\n      }\n    }\n\n    setisCleanifyLoading({\n      numOriginalClean: cleanTrackIDs.length,\n      numCleanFound: cleanVersionTrackIDs.length,\n      numStillMissing: remainingExplicitSongs\n    });\n    setCleanedPlaylistID(newPlaylist.id);\n    setCleanifyStatus(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    align: \"center\",\n    justify: \"center\",\n    p: [0, 1, 15, 15],\n    children: /*#__PURE__*/_jsxDEV(VStack, {\n      children: [/*#__PURE__*/_jsxDEV(Heading, {\n        children: \"Cleanify\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 9\n      }, this), user && /*#__PURE__*/_jsxDEV(Text, {\n        fontSize: \"lg\",\n        children: `Username: ${user.display_name}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 18\n      }, this), !user && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(Failed, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 13\n        }, this)\n      }, void 0, false), user && /*#__PURE__*/_jsxDEV(SimpleGrid, {\n        spacing: [1, 3, 5, 5],\n        columns: [1, 1, 2, 2],\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          isLoading: cleanifyStatus,\n          colorScheme: \"green\",\n          onClick: handleCleanify,\n          loadingText: \"Cleanifying\",\n          isDisabled: !checkedPlaylist,\n          children: \"Cleanify Playlist\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          colorScheme: \"red\",\n          onClick: handleDelete,\n          isLoading: deleteStatus,\n          loadingText: \"Deleting\",\n          isDisabled: !checkedPlaylist,\n          children: \"Delete Playlist\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 13\n        }, this), cleanedPlaylistID && /*#__PURE__*/_jsxDEV(Button, {\n          isDisabled: !cleanedPlaylistID,\n          onClick: onSummaryOpen,\n          children: \"View Summary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 15\n        }, this), cleanedPlaylistID && songsToResolve.size !== 0 && /*#__PURE__*/_jsxDEV(Button, {\n          isDisabled: songsToResolve.size === 0,\n          colorScheme: \"yellow\",\n          onClick: onResolveOpen,\n          children: \"Resolve Conflicts\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 11\n      }, this), isCleanifyLoading && /*#__PURE__*/_jsxDEV(SummaryModal, {\n        isOpen: isSummaryOpen,\n        onClose: onSummaryClose,\n        details: isCleanifyLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 11\n      }, this), songsToResolve && /*#__PURE__*/_jsxDEV(ConflictModal, {\n        isOpen: isResolveOpen,\n        onClose: onResolveClose,\n        details: songsToResolve\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(SimpleGrid, {\n        columns: [1, 1, 1, 3],\n        alignItems: \"center\",\n        spacing: 5,\n        children: [/*#__PURE__*/_jsxDEV(Container, {\n          mt: [20, 1, 1, 1],\n          mb: [20, 1, 1, 1],\n          h: \"700px\",\n          width: [\"200px\", \"300px\", \"400px\"],\n          children: user && /*#__PURE__*/_jsxDEV(PlaylistTable, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 369,\n            columnNumber: 22\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Container, {\n          mt: [\"150px\", 1, 1, 1],\n          mb: [20, 1, 1, 1],\n          h: \"700px\",\n          width: [\"200px\", \"300px\", \"400px\"],\n          children: checkedPlaylist && /*#__PURE__*/_jsxDEV(SongTable, {\n            title: `Before Cleanified ${tracks ? `(${tracks.items.length} songs)` : \"\"}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 378,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Container, {\n          mt: [0, 1, 1, 1],\n          mb: [20, 1, 1, 1],\n          h: \"700px\",\n          width: [\"200px\", \"300px\", \"400px\"],\n          children: checkedPlaylist && cleanedPlaylistID ? /*#__PURE__*/_jsxDEV(CleanSongTable, {\n            title: `After Cleanified (${isCleanifyLoading.numCleanFound + isCleanifyLoading.numOriginalClean} songs)`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 392,\n            columnNumber: 15\n          }, this) : cleanifyProgress && cleanifyProgress !== 100 && /*#__PURE__*/_jsxDEV(Center, {\n            h: \"700px\",\n            flexDir: \"column\",\n            children: /*#__PURE__*/_jsxDEV(ProgressBar, {\n              value: cleanifyProgress\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 402,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 401,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 301,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Home, \"YhM91uLqDzcYTnnXuOQB0K1v2eE=\", false, function () {\n  return [useAuth, useGlobalState, useDisclosure, useDisclosure, useToast, useGlobalState];\n});\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/armanrafati/Documents/Cleanify/client/src/pages/Home.jsx"],"names":["Heading","Flex","VStack","Text","Center","useCallback","useEffect","useState","createPlaylist","getTracks","getNextTracks","getUser","deletePlaylist","addTracksToPlaylist","getPlaylists","searchForTracks","Button","SimpleGrid","Container","useToast","useDisclosure","PlaylistTable","SongTable","useGlobalState","CleanSongTable","SummaryModal","Failed","useAuth","SpotifyWebApi","ConflictModal","ProgressBar","CLIENT_ID","fuzzball","require","spotifyApi","clientId","Home","code","console","log","accessToken","user","setUser","setToken","setCheckedPlaylist","songsToResolve","setSongsToResolve","cleanifyStatus","setCleanifyStatus","deleteStatus","setDeleteStatus","cleanifyProgress","setCleanifyProgress","setAccessToken","localStorage","setItem","isOpen","isSummaryOpen","onOpen","onSummaryOpen","onClose","onSummaryClose","isResolveOpen","onResolveOpen","onResolveClose","isCleanifyLoading","setisCleanifyLoading","toast","checkedPlaylist","playlists","tracks","setPlaylists","setTracks","cleanedPlaylistID","setCleanedPlaylistID","loadUser","handleDelete","String","Number","items","id","refreshedPlaylists","Error","title","position","status","duration","isClosable","containSameArtists","first","second","artists","length","artistCount","index","name","getAllTracks","allTracks","push","next","handleCleanify","cleanTrackIDs","explicitTracks","t","track","explicit","query","uri","link","external_urls","spotify","cleanVersionTrackIDs","remainingExplicitSongs","potentiallyCleanSongs","Map","total","trackResponses","trim","replaceAll","isClean","distance","ratio","has","get","original_track_uri","original_track_link","set","queryURL","encodeURIComponent","newPlaylist","allCleanSongs","remainingSongs","splice","numOriginalClean","numCleanFound","numStillMissing","display_name","size"],"mappings":"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","sourcesContent":["import { Heading, Flex, VStack, Text, Center } from \"@chakra-ui/layout\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport {\n  createPlaylist,\n  getTracks,\n  getNextTracks,\n  getUser,\n  deletePlaylist,\n  addTracksToPlaylist,\n  getPlaylists,\n  searchForTracks,\n} from \"../utils/api.js\";\nimport {\n  Button,\n  SimpleGrid,\n  Container,\n  useToast,\n  useDisclosure,\n} from \"@chakra-ui/react\";\nimport PlaylistTable from \"../components/Tables/PlaylistTable.jsx\";\nimport SongTable from \"../components/Tables/SongTable.jsx\";\nimport { useGlobalState } from \"../contexts/GlobalContext.jsx\";\nimport CleanSongTable from \"../components/Tables/CleanSongTable.jsx\";\nimport { SummaryModal } from \"../components/Modals/SummaryModal.jsx\";\nimport Failed from \"./Failed.jsx\";\nimport useAuth from \"../hooks/useAuth.jsx\";\nimport SpotifyWebApi from \"spotify-web-api-node\";\nimport { ConflictModal } from \"../components/Modals/Conflict/ConflictModal.jsx\";\nimport ProgressBar from \"../components/ProgressBar.jsx\";\nimport { CLIENT_ID } from \"../utils/Constants.jsx\";\nconst fuzzball = require(\"fuzzball\");\n\nexport const spotifyApi = new SpotifyWebApi({\n  clientId: CLIENT_ID,\n});\n\nconst Home = ({ code }) => {\n  console.log(\"code from url\", code);\n  const accessToken = useAuth(code);\n  const [user, setUser] = useState();\n  const { setToken, setCheckedPlaylist, songsToResolve, setSongsToResolve } =\n    useGlobalState();\n  const [cleanifyStatus, setCleanifyStatus] = useState(false);\n  const [deleteStatus, setDeleteStatus] = useState(false);\n  const [cleanifyProgress, setCleanifyProgress] = useState(false);\n\n  useEffect(() => {\n    if (!accessToken) return;\n    console.log(\"Access token trying to set\");\n    spotifyApi.setAccessToken(accessToken);\n    setToken(accessToken);\n    spotifyApi.setAccessToken(accessToken);\n    localStorage.setItem(\"api-key\", accessToken);\n  }, [accessToken, setToken]);\n\n  const {\n    isOpen: isSummaryOpen,\n    onOpen: onSummaryOpen,\n    onClose: onSummaryClose,\n  } = useDisclosure();\n\n  const {\n    isOpen: isResolveOpen,\n    onOpen: onResolveOpen,\n    onClose: onResolveClose,\n  } = useDisclosure();\n  const [isCleanifyLoading, setisCleanifyLoading] = useState();\n\n  const toast = useToast();\n\n  const {\n    checkedPlaylist,\n    playlists,\n    tracks,\n    setPlaylists,\n    setTracks,\n    cleanedPlaylistID,\n    setCleanedPlaylistID,\n  } = useGlobalState();\n\n  useEffect(() => {\n    const loadUser = async () => {\n      setUser(await getUser());\n    };\n    loadUser();\n  }, []);\n\n  const handleDelete = async () => {\n    setDeleteStatus(true);\n    setCheckedPlaylist(\n      String(Number(checkedPlaylist) - 1) >= 0\n        ? String(Number(checkedPlaylist) - 1)\n        : \"\"\n    );\n\n    await deletePlaylist(playlists.items[checkedPlaylist].id);\n    const refreshedPlaylists = await getPlaylists();\n    if (refreshedPlaylists instanceof Error) {\n      toast({\n        title: `Unable to perform action. Please try refreshing the page and log in again`,\n        position: \"top-right\",\n        status: \"error\",\n        duration: 7000,\n        isClosable: true,\n      });\n\n      return;\n    }\n    setPlaylists(refreshedPlaylists);\n    setDeleteStatus(false);\n  };\n\n  const containSameArtists = (first, second) => {\n    if (first.artists.length !== second.artists.length) return false;\n    let artistCount = first.artists.length;\n    for (let index = 0; index < artistCount; index++) {\n      if (first.artists[index].name !== second.artists[index].name) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  const getAllTracks = useCallback(async () => {\n    setTracks({ items: [] });\n\n    const allTracks = [];\n    let tracks = await getTracks(playlists.items[checkedPlaylist].id);\n    if (tracks instanceof Error) {\n      toast({\n        title: `Unable to perform action. Please try refreshing the page and log in again`,\n        position: \"top-right\",\n        status: \"error\",\n        duration: 7000,\n        isClosable: true,\n      });\n      return;\n    }\n    if (!tracks) {\n      toast({\n        title: `Error fetching all tracks. Refresh and try again`,\n        position: \"top-right\",\n        status: \"error\",\n        duration: 7000,\n        isClosable: true,\n      });\n    }\n    allTracks.push(...tracks.items);\n    while (tracks && tracks.next) {\n      tracks = await getNextTracks(tracks.next);\n      if (!tracks) {\n        toast({\n          title: `Error fetching all tracks. Refresh and try again`,\n          position: \"top-right\",\n          status: \"error\",\n          duration: 7000,\n          isClosable: true,\n        });\n      }\n      if (tracks && tracks.items) {\n        allTracks.push(...tracks.items);\n      }\n    }\n    tracks = { items: allTracks };\n\n    setTracks(tracks);\n    return allTracks;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [checkedPlaylist, setTracks, toast]);\n\n  useEffect(() => {\n    if (checkedPlaylist && checkedPlaylist >= 0) {\n      getAllTracks();\n    }\n  }, [checkedPlaylist, getAllTracks]);\n\n  const handleCleanify = async () => {\n    setCleanifyStatus(true);\n\n    await getAllTracks();\n\n    const cleanTrackIDs = [];\n    const explicitTracks = [];\n\n    for (let t of tracks.items) {\n      if (!t.track) continue;\n      t && t.track && t.track.explicit\n        ? explicitTracks.push({\n            query: `${t.track.name} ${t.track.artists[0].name}`,\n            name: t.track.name,\n            artists: t.track.artists,\n            uri: t.track.uri,\n            link: t.track.external_urls.spotify,\n          })\n        : cleanTrackIDs.push(t.track.uri);\n    }\n\n    const cleanVersionTrackIDs = [];\n    const remainingExplicitSongs = [];\n    const potentiallyCleanSongs = new Map();\n\n    const total = explicitTracks.length;\n    let index = 0;\n    for (let track of explicitTracks) {\n      index++;\n      if (track.query.length === 0) continue;\n      const trackResponses = await searchForTracks(\n        track.query.trim().replaceAll(\"#\", \"\")\n      );\n      if (!trackResponses) {\n        toast({\n          title: `Error searching for track. Refresh and try again`,\n          position: \"top-right\",\n          status: \"error\",\n          duration: 7000,\n          isClosable: true,\n        });\n      }\n      if (trackResponses instanceof Error) {\n        toast({\n          title: `Unable to perform action. Please try refreshing the page and log in again`,\n          position: \"top-right\",\n          status: \"error\",\n          duration: 7000,\n          isClosable: true,\n        });\n        return;\n      }\n      let isClean = false;\n      if (trackResponses && trackResponses.tracks.items.length > 0) {\n        for (let t of trackResponses.tracks.items) {\n          if (t && t.name && !t.explicit && containSameArtists(t, track)) {\n            if (fuzzball.distance(t.name, track.name) === 0) {\n              cleanVersionTrackIDs.push(t.uri);\n              isClean = true;\n              break;\n            } else if (fuzzball.ratio(t.name, track.name) > 1) {\n              if (potentiallyCleanSongs.has(track.name)) {\n                potentiallyCleanSongs.get(track.name).push({\n                  name: t.name,\n                  link: t.external_urls.spotify,\n                  uri: t.uri,\n                  original_track_uri: track.uri,\n                  original_track_link: track.link,\n                });\n              } else {\n                potentiallyCleanSongs.set(track.name, [\n                  {\n                    name: t.name,\n                    link: t.external_urls.spotify,\n                    uri: t.uri,\n                    original_track_uri: track.uri,\n                    original_track_link: track.link,\n                  },\n                ]);\n              }\n            }\n          }\n        }\n        if (!isClean) {\n          remainingExplicitSongs.push({\n            name: track.name,\n            queryURL: `https://open.spotify.com/search/${encodeURIComponent(\n              track.query\n            )}`,\n          });\n        }\n      }\n      setCleanifyProgress((index / total) * 100);\n    }\n\n    setSongsToResolve(potentiallyCleanSongs);\n\n    const newPlaylist = await createPlaylist(\n      `${playlists.items[checkedPlaylist].name} (Cleanified)`,\n      user.id\n    );\n    setPlaylists(await getPlaylists());\n\n    let allCleanSongs = [...cleanTrackIDs, ...cleanVersionTrackIDs];\n    let remainingSongs = [];\n\n    while (allCleanSongs.length > 0) {\n      remainingSongs = allCleanSongs.splice(0, 100);\n      if (remainingSongs.length > 0) {\n        await addTracksToPlaylist(newPlaylist.id, remainingSongs);\n      }\n    }\n\n    setisCleanifyLoading({\n      numOriginalClean: cleanTrackIDs.length,\n      numCleanFound: cleanVersionTrackIDs.length,\n      numStillMissing: remainingExplicitSongs,\n    });\n\n    setCleanedPlaylistID(newPlaylist.id);\n    setCleanifyStatus(false);\n  };\n\n  return (\n    <Flex align=\"center\" justify=\"center\" p={[0, 1, 15, 15]}>\n      <VStack>\n        <Heading>Cleanify</Heading>\n\n        {user && <Text fontSize=\"lg\">{`Username: ${user.display_name}`}</Text>}\n        {!user && (\n          <>\n            <Failed />\n          </>\n        )}\n\n        {user && (\n          <SimpleGrid spacing={[1, 3, 5, 5]} columns={[1, 1, 2, 2]}>\n            <Button\n              isLoading={cleanifyStatus}\n              colorScheme=\"green\"\n              onClick={handleCleanify}\n              loadingText=\"Cleanifying\"\n              isDisabled={!checkedPlaylist}\n            >\n              Cleanify Playlist\n            </Button>\n            <Button\n              colorScheme=\"red\"\n              onClick={handleDelete}\n              isLoading={deleteStatus}\n              loadingText=\"Deleting\"\n              isDisabled={!checkedPlaylist}\n            >\n              Delete Playlist\n            </Button>\n            {cleanedPlaylistID && (\n              <Button isDisabled={!cleanedPlaylistID} onClick={onSummaryOpen}>\n                View Summary\n              </Button>\n            )}\n            {cleanedPlaylistID && songsToResolve.size !== 0 && (\n              <Button\n                isDisabled={songsToResolve.size === 0}\n                colorScheme=\"yellow\"\n                onClick={onResolveOpen}\n              >\n                Resolve Conflicts\n              </Button>\n            )}\n          </SimpleGrid>\n        )}\n        {isCleanifyLoading && (\n          <SummaryModal\n            isOpen={isSummaryOpen}\n            onClose={onSummaryClose}\n            details={isCleanifyLoading}\n          />\n        )}\n        {songsToResolve && (\n          <ConflictModal\n            isOpen={isResolveOpen}\n            onClose={onResolveClose}\n            details={songsToResolve}\n          />\n        )}\n        <SimpleGrid columns={[1, 1, 1, 3]} alignItems=\"center\" spacing={5}>\n          <Container\n            mt={[20, 1, 1, 1]}\n            mb={[20, 1, 1, 1]}\n            h=\"700px\"\n            width={[\"200px\", \"300px\", \"400px\"]}\n          >\n            {user && <PlaylistTable />}\n          </Container>\n          <Container\n            mt={[\"150px\", 1, 1, 1]}\n            mb={[20, 1, 1, 1]}\n            h=\"700px\"\n            width={[\"200px\", \"300px\", \"400px\"]}\n          >\n            {checkedPlaylist && (\n              <SongTable\n                title={`Before Cleanified ${\n                  tracks ? `(${tracks.items.length} songs)` : \"\"\n                }`}\n              />\n            )}\n          </Container>\n          <Container\n            mt={[0, 1, 1, 1]}\n            mb={[20, 1, 1, 1]}\n            h=\"700px\"\n            width={[\"200px\", \"300px\", \"400px\"]}\n          >\n            {checkedPlaylist && cleanedPlaylistID ? (\n              <CleanSongTable\n                title={`After Cleanified (${\n                  isCleanifyLoading.numCleanFound +\n                  isCleanifyLoading.numOriginalClean\n                } songs)`}\n              />\n            ) : (\n              cleanifyProgress &&\n              cleanifyProgress !== 100 && (\n                <Center h=\"700px\" flexDir=\"column\">\n                  <ProgressBar value={cleanifyProgress} />\n                </Center>\n              )\n            )}\n          </Container>\n        </SimpleGrid>\n      </VStack>\n    </Flex>\n  );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/armanrafati/Documents/Cleanify/client/src/components/Tables/PlaylistTable.jsx\",\n    _s = $RefreshSig$();\n\nimport { Center, Radio, Spinner, Text } from \"@chakra-ui/react\";\nimport { useEffect, useMemo } from \"react\";\nimport { useGlobalState } from \"../../contexts/GlobalContext\";\nimport { getPlaylists } from \"../../utils/api\";\nimport CustomTable from \"./CustomTable\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PlaylistTable = () => {\n  _s();\n\n  const {\n    playlists,\n    setPlaylists\n  } = useGlobalState();\n  useEffect(() => {\n    const loadPlaylists = async () => {\n      const p = await getPlaylists();\n      setPlaylists(p);\n    };\n\n    loadPlaylists();\n  }, [setPlaylists]);\n  const data = [];\n  playlists && playlists.items.map((playlist, index) => data.push({\n    entry: {\n      name: playlist.name,\n      idx: String(index)\n    }\n  }));\n  const columns = useMemo(() => [{\n    Header: `Playlists`,\n    accessor: \"entry\",\n    Cell: _ref => {\n      let {\n        value: {\n          name,\n          idx\n        }\n      } = _ref;\n      return /*#__PURE__*/_jsxDEV(Radio, {\n        value: String(idx),\n        children: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this);\n    }\n  }], []);\n  return data.length === 0 ? /*#__PURE__*/_jsxDEV(Center, {\n    h: \"700px\",\n    flexDir: \"column\",\n    children: [/*#__PURE__*/_jsxDEV(Text, {\n      mb: 3,\n      children: \"Fetching playlists\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(CustomTable, {\n    columns: columns,\n    data: data,\n    hasRadio: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PlaylistTable, \"8vSG/SA0jTUup27EapOxvrmj9FE=\", false, function () {\n  return [useGlobalState];\n});\n\n_c = PlaylistTable;\nexport default PlaylistTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlaylistTable\");","map":{"version":3,"sources":["/Users/armanrafati/Documents/Cleanify/client/src/components/Tables/PlaylistTable.jsx"],"names":["Center","Radio","Spinner","Text","useEffect","useMemo","useGlobalState","getPlaylists","CustomTable","PlaylistTable","playlists","setPlaylists","loadPlaylists","p","data","items","map","playlist","index","push","entry","name","idx","String","columns","Header","accessor","Cell","value","length"],"mappings":";;;AAAA,SAASA,MAAT,EAAiBC,KAAjB,EAAwBC,OAAxB,EAAiCC,IAAjC,QAA6C,kBAA7C;AACA,SAASC,SAAT,EAAoBC,OAApB,QAAmC,OAAnC;AACA,SAASC,cAAT,QAA+B,8BAA/B;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,OAAOC,WAAP,MAAwB,eAAxB;;;AAEA,MAAMC,aAAa,GAAG,MAAM;AAAA;;AAC1B,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAA8BL,cAAc,EAAlD;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMQ,aAAa,GAAG,YAAY;AAChC,YAAMC,CAAC,GAAG,MAAMN,YAAY,EAA5B;AACAI,MAAAA,YAAY,CAACE,CAAD,CAAZ;AACD,KAHD;;AAIAD,IAAAA,aAAa;AACd,GANQ,EAMN,CAACD,YAAD,CANM,CAAT;AAQA,QAAMG,IAAI,GAAG,EAAb;AACAJ,EAAAA,SAAS,IACPA,SAAS,CAACK,KAAV,CAAgBC,GAAhB,CAAoB,CAACC,QAAD,EAAWC,KAAX,KAClBJ,IAAI,CAACK,IAAL,CAAU;AACRC,IAAAA,KAAK,EAAE;AAAEC,MAAAA,IAAI,EAAEJ,QAAQ,CAACI,IAAjB;AAAuBC,MAAAA,GAAG,EAAEC,MAAM,CAACL,KAAD;AAAlC;AADC,GAAV,CADF,CADF;AAOA,QAAMM,OAAO,GAAGnB,OAAO,CACrB,MAAM,CACJ;AACEoB,IAAAA,MAAM,EAAG,WADX;AAEEC,IAAAA,QAAQ,EAAE,OAFZ;AAGEC,IAAAA,IAAI,EAAE;AAAA,UAAC;AAAEC,QAAAA,KAAK,EAAE;AAAEP,UAAAA,IAAF;AAAQC,UAAAA;AAAR;AAAT,OAAD;AAAA,0BACJ,QAAC,KAAD;AAAO,QAAA,KAAK,EAAEC,MAAM,CAACD,GAAD,CAApB;AAAA,kBAA4BD;AAA5B;AAAA;AAAA;AAAA;AAAA,cADI;AAAA;AAHR,GADI,CADe,EAUrB,EAVqB,CAAvB;AAaA,SAAOP,IAAI,CAACe,MAAL,KAAgB,CAAhB,gBACL,QAAC,MAAD;AAAQ,IAAA,CAAC,EAAC,OAAV;AAAkB,IAAA,OAAO,EAAC,QAA1B;AAAA,4BACE,QAAC,IAAD;AAAM,MAAA,EAAE,EAAE,CAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADK,gBAML,QAAC,WAAD;AAAa,IAAA,OAAO,EAAEL,OAAtB;AAA+B,IAAA,IAAI,EAAEV,IAArC;AAA2C,IAAA,QAAQ,EAAE;AAArD;AAAA;AAAA;AAAA;AAAA,UANF;AAQD,CAxCD;;GAAML,a;UACgCH,c;;;KADhCG,a;AAyCN,eAAeA,aAAf","sourcesContent":["import { Center, Radio, Spinner, Text } from \"@chakra-ui/react\";\nimport { useEffect, useMemo } from \"react\";\nimport { useGlobalState } from \"../../contexts/GlobalContext\";\nimport { getPlaylists } from \"../../utils/api\";\nimport CustomTable from \"./CustomTable\";\n\nconst PlaylistTable = () => {\n  const { playlists, setPlaylists } = useGlobalState();\n\n  useEffect(() => {\n    const loadPlaylists = async () => {\n      const p = await getPlaylists();\n      setPlaylists(p);\n    };\n    loadPlaylists();\n  }, [setPlaylists]);\n\n  const data = [];\n  playlists &&\n    playlists.items.map((playlist, index) =>\n      data.push({\n        entry: { name: playlist.name, idx: String(index) },\n      })\n    );\n\n  const columns = useMemo(\n    () => [\n      {\n        Header: `Playlists`,\n        accessor: \"entry\",\n        Cell: ({ value: { name, idx } }) => (\n          <Radio value={String(idx)}>{name}</Radio>\n        ),\n      },\n    ],\n    []\n  );\n\n  return data.length === 0 ? (\n    <Center h=\"700px\" flexDir=\"column\">\n      <Text mb={3}>Fetching playlists</Text>\n      <Spinner />\n    </Center>\n  ) : (\n    <CustomTable columns={columns} data={data} hasRadio={true} />\n  );\n};\nexport default PlaylistTable;\n"]},"metadata":{},"sourceType":"module"}